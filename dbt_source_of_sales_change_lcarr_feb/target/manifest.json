{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.4", "generated_at": "2022-06-27T20:28:35.569013Z", "invocation_id": "0d22697c-46a8-408f-926c-3ffd17a42bf0", "env": {}, "project_id": "0ff19d8d6143ecd8bfafdfd7243aeac1", "user_id": "151f4c45-8e13-468e-8042-c0efca1697cf", "send_anonymous_usage_stats": true, "adapter_type": "redshift"}, "nodes": {"model.source_of_sales_change_lcarr.region_agg__all_groupings": {"raw_sql": "{%- set grouping_statements = [\"location_type_code,daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,'All' as destination_desc\",\n    \"location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,'All' as destination_desc\"] -%}\n\nwith aggregations_all_groupings as (\n    {%- for grouping_statement in grouping_statements %}\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    {{grouping_statement}},\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from {{ref('trans_item')}}\n    group by 1,2,3,4,5,6,7,8,9\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n) \nselect * from aggregations_all_groupings", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "region", "aggregations", "region_agg__all_groupings"], "unique_id": "model.source_of_sales_change_lcarr.region_agg__all_groupings", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "region/aggregations/region_agg__all_groupings.sql", "original_file_path": "models/region/aggregations/region_agg__all_groupings.sql", "name": "region_agg__all_groupings", "alias": "lcarr_sosx_region_agg__all_groupings", "checksum": {"name": "sha256", "checksum": "b89c92ac8b141c6df1dcdf11685a9e1e17350f8ae791dc8d6b0b4e7099e28fba"}, "tags": [], "refs": [["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/region/aggregations/region_agg__all_groupings.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.162522, "compiled_sql": "with aggregations_all_groupings as (\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,'All' as daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n) \nselect * from aggregations_all_groupings", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_region_agg__all_groupings\""}, "model.source_of_sales_change_lcarr.region_agg__month_lookback": {"raw_sql": "with add_month_lookback as (\n  select quarter,region_name,service_team_name,dma_name,location_num,\n  monthend_date,'1 month' as look_back_period,\n  location_type_code,daypart,destination_desc,sales_sub_total,\n  transactions,purchaser_visits,credit_txn,\n  total_items_promo_count,total_items_sold_count\n  from {{ref('region_agg__all_groupings')}}\n)\nselect * from add_month_lookback", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.region_agg__all_groupings"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "region", "aggregations", "region_agg__month_lookback"], "unique_id": "model.source_of_sales_change_lcarr.region_agg__month_lookback", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "region/aggregations/region_agg__month_lookback.sql", "original_file_path": "models/region/aggregations/region_agg__month_lookback.sql", "name": "region_agg__month_lookback", "alias": "lcarr_sosx_region_agg__month_lookback", "checksum": {"name": "sha256", "checksum": "0e11c833cf2740a6af67cda8a082d0b303da69267a124abbee14d658f36587d3"}, "tags": [], "refs": [["region_agg__all_groupings"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/region/aggregations/region_agg__month_lookback.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.170016, "compiled_sql": "with add_month_lookback as (\n  select quarter,region_name,service_team_name,dma_name,location_num,\n  monthend_date,'1 month' as look_back_period,\n  location_type_code,daypart,destination_desc,sales_sub_total,\n  transactions,purchaser_visits,credit_txn,\n  total_items_promo_count,total_items_sold_count\n  from \"cfa\".\"public\".\"lcarr_sosx_region_agg__all_groupings\"\n)\nselect * from add_month_lookback", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback\""}, "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct": {"raw_sql": "with one_month_set_up as (\n  select a.region_name,a.service_team_name,a.dma_name,\n  a.location_num,a.monthend_date,'1 month' as look_back_period,\n  a.trans_id,a.cfa_one_id,a.customer_hash,\n  a.location_type_code,a.daypart,a.destination_desc,\n  b.same_store_eligible\n  from {{ref('trans_item')}} a\n  inner join {{ref('stg__fct_same_store')}} b\n  on a.location_num = b.location_num\n  and a.monthend_date = b.monthend_date \n  and b.look_back_period = '1 month'\n)\nselect * from one_month_set_up", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.stg__fct_same_store"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "region", "aggregations_distinct", "region_agg__month_lookback_distinct"], "unique_id": "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "region/aggregations_distinct/region_agg__month_lookback_distinct.sql", "original_file_path": "models/region/aggregations_distinct/region_agg__month_lookback_distinct.sql", "name": "region_agg__month_lookback_distinct", "alias": "lcarr_sosx_region_agg__month_lookback_distinct", "checksum": {"name": "sha256", "checksum": "8938ce276eb15cc9581551a2f2be8d9960b53bd9f8a6a83945751efcceca86fc"}, "tags": [], "refs": [["trans_item"], ["stg__fct_same_store"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/region/aggregations_distinct/region_agg__month_lookback_distinct.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.175901, "compiled_sql": "with one_month_set_up as (\n  select a.region_name,a.service_team_name,a.dma_name,\n  a.location_num,a.monthend_date,'1 month' as look_back_period,\n  a.trans_id,a.cfa_one_id,a.customer_hash,\n  a.location_type_code,a.daypart,a.destination_desc,\n  b.same_store_eligible\n  from \"cfa\".\"public\".\"lcarr_sosx_trans_item\" a\n  inner join \"cfa\".\"public\".\"lcarr_sosx_stg__fct_same_store\" b\n  on a.location_num = b.location_num\n  and a.monthend_date = b.monthend_date \n  and b.look_back_period = '1 month'\n)\nselect * from one_month_set_up", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\""}, "model.source_of_sales_change_lcarr.national__final_output": {"raw_sql": "with twentytwo as (\nselect *\nfrom {{ref('national__big_join')}} \nwhere monthend_date = cast('02-28-2022' as date) \n), twentyone as ( \nselect * \nfrom {{ref('national__big_join')}}\nwhere monthend_date = cast('02-28-2021' as date)\n) \n\nselect a.quarter,\na.look_back_period,a.same_store,\n'National' as geolevel, \n'National' as geolevel_detail,\na.location_type_code,a.daypart,a.destination_desc,\na.monthend_date as current_monthend_date,\na.sales_sub_total as current_sales_sub_total,\na.transactions as current_transactions,\na.purchaser_visits as current_purchaser_visits,\na.credit_txn as current_credit_txn,\na.total_items_promo_count as current_total_items_promo_count,\na.total_items_sold_count as current_total_items_sold_count,\na.actual_days as current_actual_days,\na.avail_days as current_avail_days,\na.price_index as current_price_index,\na.unique_cfa_one_ids as current_unique_cfa_one_ids,\na.unique_hashes as current_unique_hashes,\na.hash_transactions as current_hash_transactions,\na.hash_per_customer as current_hash_per_customer,\na.previous_year_monthend_date as check_date,\nb.monthend_date as previous_monthend_date,\nb.sales_sub_total as previous_sales_sub_total,\nb.transactions as previous_transactions,\nb.purchaser_visits as previous_purchaser_visits,\nb.credit_txn as previous_credit_txn,\nb.total_items_promo_count as previous_total_items_promo_count,\nb.total_items_sold_count as previous_total_items_sold_count,\nb.actual_days as previous_actual_days,\nb.avail_days as previous_avail_days,\nb.price_index as previous_price_index,\nb.unique_cfa_one_ids as previous_unique_cfa_one_ids,\nb.unique_hashes as previous_unique_hashes,\nb.hash_transactions as previous_hash_transactions,\nb.hash_per_customer as previous_hash_per_customer\nfrom twentytwo a \ninner join twentyone b\non a.look_back_period = b.look_back_period \nand a.same_store = b.same_store \nand a.location_type_code = b.location_type_code \nand a.daypart = b.daypart\nand a.destination_desc = b.destination_desc\nand a.previous_year_monthend_date = b.monthend_date\norder by same_store,location_type_code,daypart,destination_desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.national__big_join", "model.source_of_sales_change_lcarr.national__big_join"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "national", "final_output", "national__final_output"], "unique_id": "model.source_of_sales_change_lcarr.national__final_output", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "national/final_output/national__final_output.sql", "original_file_path": "models/national/final_output/national__final_output.sql", "name": "national__final_output", "alias": "lcarr_sosx_national__final_output", "checksum": {"name": "sha256", "checksum": "d4ff32a4f8ca216b1bc99fecfe9f9f235949094d0395507d3511056b752920ea"}, "tags": [], "refs": [["national__big_join"], ["national__big_join"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/national/final_output/national__final_output.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.198059, "compiled_sql": "with twentytwo as (\nselect *\nfrom \"cfa\".\"public\".\"lcarr_sosx_national__big_join\" \nwhere monthend_date = cast('02-28-2022' as date) \n), twentyone as ( \nselect * \nfrom \"cfa\".\"public\".\"lcarr_sosx_national__big_join\"\nwhere monthend_date = cast('02-28-2021' as date)\n) \n\nselect a.quarter,\na.look_back_period,a.same_store,\n'National' as geolevel, \n'National' as geolevel_detail,\na.location_type_code,a.daypart,a.destination_desc,\na.monthend_date as current_monthend_date,\na.sales_sub_total as current_sales_sub_total,\na.transactions as current_transactions,\na.purchaser_visits as current_purchaser_visits,\na.credit_txn as current_credit_txn,\na.total_items_promo_count as current_total_items_promo_count,\na.total_items_sold_count as current_total_items_sold_count,\na.actual_days as current_actual_days,\na.avail_days as current_avail_days,\na.price_index as current_price_index,\na.unique_cfa_one_ids as current_unique_cfa_one_ids,\na.unique_hashes as current_unique_hashes,\na.hash_transactions as current_hash_transactions,\na.hash_per_customer as current_hash_per_customer,\na.previous_year_monthend_date as check_date,\nb.monthend_date as previous_monthend_date,\nb.sales_sub_total as previous_sales_sub_total,\nb.transactions as previous_transactions,\nb.purchaser_visits as previous_purchaser_visits,\nb.credit_txn as previous_credit_txn,\nb.total_items_promo_count as previous_total_items_promo_count,\nb.total_items_sold_count as previous_total_items_sold_count,\nb.actual_days as previous_actual_days,\nb.avail_days as previous_avail_days,\nb.price_index as previous_price_index,\nb.unique_cfa_one_ids as previous_unique_cfa_one_ids,\nb.unique_hashes as previous_unique_hashes,\nb.hash_transactions as previous_hash_transactions,\nb.hash_per_customer as previous_hash_per_customer\nfrom twentytwo a \ninner join twentyone b\non a.look_back_period = b.look_back_period \nand a.same_store = b.same_store \nand a.location_type_code = b.location_type_code \nand a.daypart = b.daypart\nand a.destination_desc = b.destination_desc\nand a.previous_year_monthend_date = b.monthend_date\norder by same_store,location_type_code,daypart,destination_desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_national__final_output\""}, "model.source_of_sales_change_lcarr.national__big_join": {"raw_sql": "with big_join as ( \n  select a.*, e.unique_cfa_one_ids, e.unique_hashes, e.hash_transactions, e.hash_per_customer,\n  b.price_index, \n  d.previous_year_monthend_date\n  from {{ref('national_agg__same_store_all_store')}} a\n  inner join {{ref('calc__dim_price_index_3')}} b\n  on a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  and a.same_store = b.same_store\n  inner join {{ref('calc__dim_monthend_date')}} d\n  on a.monthend_date = d.monthend_date\n  inner join {{ref('national_agg__distinct_join')}} e\n  on a.monthend_date = e.monthend_date\n  and a.look_back_period = e.look_back_period\n  and a.same_store = e.same_store\n  and a.location_type_code = e.location_type_code\n  and a.daypart = e.daypart\n  and a.destination_desc = e.destination_desc\n)\nselect * from big_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.national_agg__same_store_all_store", "model.source_of_sales_change_lcarr.calc__dim_price_index_3", "model.source_of_sales_change_lcarr.calc__dim_monthend_date", "model.source_of_sales_change_lcarr.national_agg__distinct_join"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "national", "final_output", "national__big_join"], "unique_id": "model.source_of_sales_change_lcarr.national__big_join", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "national/final_output/national__big_join.sql", "original_file_path": "models/national/final_output/national__big_join.sql", "name": "national__big_join", "alias": "lcarr_sosx_national__big_join", "checksum": {"name": "sha256", "checksum": "a79fe8b4d2297596988be4c2df295b26656962cda6b540f3cb10cc45ea5b1401"}, "tags": [], "refs": [["national_agg__same_store_all_store"], ["calc__dim_price_index_3"], ["calc__dim_monthend_date"], ["national_agg__distinct_join"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/national/final_output/national__big_join.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.200583, "compiled_sql": "with big_join as ( \n  select a.*, e.unique_cfa_one_ids, e.unique_hashes, e.hash_transactions, e.hash_per_customer,\n  b.price_index, \n  d.previous_year_monthend_date\n  from \"cfa\".\"public\".\"lcarr_sosx_national_agg__same_store_all_store\" a\n  inner join \"cfa\".\"public\".\"lcarr_sosx_calc__dim_price_index_3\" b\n  on a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  and a.same_store = b.same_store\n  inner join \"cfa\".\"public\".\"lcarr_sosx_calc__dim_monthend_date\" d\n  on a.monthend_date = d.monthend_date\n  inner join \"cfa\".\"public\".\"lcarr_sosx_national_agg__distinct_join\" e\n  on a.monthend_date = e.monthend_date\n  and a.look_back_period = e.look_back_period\n  and a.same_store = e.same_store\n  and a.location_type_code = e.location_type_code\n  and a.daypart = e.daypart\n  and a.destination_desc = e.destination_desc\n)\nselect * from big_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_national__big_join\""}, "model.source_of_sales_change_lcarr.national_agg__all_groupings": {"raw_sql": "{%- set grouping_statements = [\"location_type_code,daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,'All' as destination_desc\",\n    \"location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,'All' as destination_desc\"] -%}\n\nwith aggregations_all_groupings as (\n    {%- for grouping_statement in grouping_statements %}\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    {{grouping_statement}},\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from {{ref('trans_item')}}\n    group by 1,2,3,4,5,6,7,8,9\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n) \nselect * from aggregations_all_groupings", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "national", "aggregations", "national_agg__all_groupings"], "unique_id": "model.source_of_sales_change_lcarr.national_agg__all_groupings", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "national/aggregations/national_agg__all_groupings.sql", "original_file_path": "models/national/aggregations/national_agg__all_groupings.sql", "name": "national_agg__all_groupings", "alias": "lcarr_sosx_national_agg__all_groupings", "checksum": {"name": "sha256", "checksum": "b89c92ac8b141c6df1dcdf11685a9e1e17350f8ae791dc8d6b0b4e7099e28fba"}, "tags": [], "refs": [["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/national/aggregations/national_agg__all_groupings.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.203129, "compiled_sql": "with aggregations_all_groupings as (\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,'All' as daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n) \nselect * from aggregations_all_groupings", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_national_agg__all_groupings\""}, "model.source_of_sales_change_lcarr.national_agg__month_lookback": {"raw_sql": "with add_month_lookback as (\n  select quarter,region_name,service_team_name,dma_name,location_num,\n  monthend_date,'1 month' as look_back_period,\n  location_type_code,daypart,destination_desc,sales_sub_total,\n  transactions,purchaser_visits,credit_txn,\n  total_items_promo_count,total_items_sold_count\n  from {{ref('national_agg__all_groupings')}}\n)\nselect * from add_month_lookback", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.national_agg__all_groupings"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "national", "aggregations", "national_agg__month_lookback"], "unique_id": "model.source_of_sales_change_lcarr.national_agg__month_lookback", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "national/aggregations/national_agg__month_lookback.sql", "original_file_path": "models/national/aggregations/national_agg__month_lookback.sql", "name": "national_agg__month_lookback", "alias": "lcarr_sosx_national_agg__month_lookback", "checksum": {"name": "sha256", "checksum": "c3bc3bf2ecd24bd762146aad3ad178486b209349503299d1228b67a5bb3d3d49"}, "tags": [], "refs": [["national_agg__all_groupings"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/national/aggregations/national_agg__month_lookback.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.2135282, "compiled_sql": "with add_month_lookback as (\n  select quarter,region_name,service_team_name,dma_name,location_num,\n  monthend_date,'1 month' as look_back_period,\n  location_type_code,daypart,destination_desc,sales_sub_total,\n  transactions,purchaser_visits,credit_txn,\n  total_items_promo_count,total_items_sold_count\n  from \"cfa\".\"public\".\"lcarr_sosx_national_agg__all_groupings\"\n)\nselect * from add_month_lookback", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback\""}, "model.source_of_sales_change_lcarr.national_agg__distinct_join": {"raw_sql": "with distinct_calcs_join as (\n    select a.monthend_date,a.look_back_period,a.same_store,\n    a.location_type_code,a.daypart,a.destination_desc,\n    a.unique_cfa_one_ids,a.unique_hashes,a.hash_transactions,\n    cast(b.cfa_one_hash_count as decimal)/b.unique_cfa_one_ids as hash_per_customer\n    from {{ref('national_agg__distinct_calcs')}} a\n    inner join {{ref('national_agg__hash_base_calcs')}} b \n    on a.monthend_date = b.monthend_date\n    and a.look_back_period = b.look_back_period\n    and a.same_store = b.same_store\n    and a.location_type_code = b.location_type_code \n    and a.daypart = b.daypart\n    and a.destination_desc = b.destination_desc\n) \nselect * from distinct_calcs_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "national", "aggregations_distinct", "national_agg__distinct_join"], "unique_id": "model.source_of_sales_change_lcarr.national_agg__distinct_join", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "national/aggregations_distinct/national_agg__distinct_join.sql", "original_file_path": "models/national/aggregations_distinct/national_agg__distinct_join.sql", "name": "national_agg__distinct_join", "alias": "lcarr_sosx_national_agg__distinct_join", "checksum": {"name": "sha256", "checksum": "cbefb8764b39af8153a0e1f1557340659ff81bfbcb2a9a68353440fe0d505619"}, "tags": [], "refs": [["national_agg__distinct_calcs"], ["national_agg__hash_base_calcs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/national/aggregations_distinct/national_agg__distinct_join.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.2157671, "compiled_sql": "with distinct_calcs_join as (\n    select a.monthend_date,a.look_back_period,a.same_store,\n    a.location_type_code,a.daypart,a.destination_desc,\n    a.unique_cfa_one_ids,a.unique_hashes,a.hash_transactions,\n    cast(b.cfa_one_hash_count as decimal)/b.unique_cfa_one_ids as hash_per_customer\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__distinct_calcs\" a\n    inner join \"cfa\".\"public\".\"lcarr_sosx_national_agg__hash_base_calcs\" b \n    on a.monthend_date = b.monthend_date\n    and a.look_back_period = b.look_back_period\n    and a.same_store = b.same_store\n    and a.location_type_code = b.location_type_code \n    and a.daypart = b.daypart\n    and a.destination_desc = b.destination_desc\n) \nselect * from distinct_calcs_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_national_agg__distinct_join\""}, "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs": {"raw_sql": "{%- set grouping_statements = [\"location_type_code,daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,'All' as destination_desc\",\n    \"location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,'All' as destination_desc\"] -%}\n\nwith hash_base_calcs_all_store as (\n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from {{ref('national_agg__month_lookback_distinct')}}\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n), hash_base_calcs_same_store as ( \n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from {{ref('national_agg__month_lookback_distinct')}}\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n)\n\nselect * from hash_base_calcs_all_store \nunion \nselect * from hash_base_calcs_same_store", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "national", "aggregations_distinct", "national_agg__hash_base_calcs"], "unique_id": "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "national/aggregations_distinct/national_agg__hash_base_calcs.sql", "original_file_path": "models/national/aggregations_distinct/national_agg__hash_base_calcs.sql", "name": "national_agg__hash_base_calcs", "alias": "lcarr_sosx_national_agg__hash_base_calcs", "checksum": {"name": "sha256", "checksum": "9e6f40852b0107f45250194106c5a6dba01e7d6afa0584a251fc84360d7205ce"}, "tags": [], "refs": [["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/national/aggregations_distinct/national_agg__hash_base_calcs.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.218225, "compiled_sql": "with hash_base_calcs_all_store as (\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6\n), hash_base_calcs_same_store as (\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6\n)\n\nselect * from hash_base_calcs_all_store \nunion \nselect * from hash_base_calcs_same_store", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_national_agg__hash_base_calcs\""}, "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct": {"raw_sql": "with one_month_set_up as (\n  select a.region_name,a.service_team_name,a.dma_name,\n  a.location_num,a.monthend_date,'1 month' as look_back_period,\n  a.trans_id,a.cfa_one_id,a.customer_hash,\n  a.location_type_code,a.daypart,a.destination_desc,\n  b.same_store_eligible\n  from {{ref('trans_item')}} a\n  inner join {{ref('stg__fct_same_store')}} b\n  on a.location_num = b.location_num\n  and a.monthend_date = b.monthend_date \n  and b.look_back_period = '1 month'\n)\nselect * from one_month_set_up", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.stg__fct_same_store"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "national", "aggregations_distinct", "national_agg__month_lookback_distinct"], "unique_id": "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "national/aggregations_distinct/national_agg__month_lookback_distinct.sql", "original_file_path": "models/national/aggregations_distinct/national_agg__month_lookback_distinct.sql", "name": "national_agg__month_lookback_distinct", "alias": "lcarr_sosx_national_agg__month_lookback_distinct", "checksum": {"name": "sha256", "checksum": "8938ce276eb15cc9581551a2f2be8d9960b53bd9f8a6a83945751efcceca86fc"}, "tags": [], "refs": [["trans_item"], ["stg__fct_same_store"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/national/aggregations_distinct/national_agg__month_lookback_distinct.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.22687, "compiled_sql": "with one_month_set_up as (\n  select a.region_name,a.service_team_name,a.dma_name,\n  a.location_num,a.monthend_date,'1 month' as look_back_period,\n  a.trans_id,a.cfa_one_id,a.customer_hash,\n  a.location_type_code,a.daypart,a.destination_desc,\n  b.same_store_eligible\n  from \"cfa\".\"public\".\"lcarr_sosx_trans_item\" a\n  inner join \"cfa\".\"public\".\"lcarr_sosx_stg__fct_same_store\" b\n  on a.location_num = b.location_num\n  and a.monthend_date = b.monthend_date \n  and b.look_back_period = '1 month'\n)\nselect * from one_month_set_up", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\""}, "model.source_of_sales_change_lcarr.national_agg__distinct_calcs": {"raw_sql": "{%- set grouping_statements = [\"location_type_code,daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,'All' as destination_desc\",\n    \"location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,'All' as destination_desc\"] -%}\n\nwith distinct_calcs_all_store as (\n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from {{ref('national_agg__month_lookback_distinct')}}\n    group by 1,2,3,4,5,6\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n), distinct_calcs_same_store as ( \n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from {{ref('national_agg__month_lookback_distinct')}}\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n)\n\nselect * from distinct_calcs_all_store \nunion \nselect * from distinct_calcs_same_store", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "national", "aggregations_distinct", "national_agg__distinct_calcs"], "unique_id": "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "national/aggregations_distinct/national_agg__distinct_calcs.sql", "original_file_path": "models/national/aggregations_distinct/national_agg__distinct_calcs.sql", "name": "national_agg__distinct_calcs", "alias": "lcarr_sosx_national_agg__distinct_calcs", "checksum": {"name": "sha256", "checksum": "88a60c05293c14573fb5bbd255f01b52acae3eb6efb3cfcd8ecdc91cb6d86274"}, "tags": [], "refs": [["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"], ["national_agg__month_lookback_distinct"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/national/aggregations_distinct/national_agg__distinct_calcs.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.229501, "compiled_sql": "with distinct_calcs_all_store as (\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6\n), distinct_calcs_same_store as (\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6\n)\n\nselect * from distinct_calcs_all_store \nunion \nselect * from distinct_calcs_same_store", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_national_agg__distinct_calcs\""}, "model.source_of_sales_change_lcarr.calc__dim_monthend_date": {"raw_sql": "with dim_date_pull as ( \n    select distinct monthend_date,CAST(DATEADD(month, -11, monthend_date) as date) as comparison_monthend_date\n    from {{source('public','dim_date')}}\n    where monthend_date >= CAST('01-01-2019' as date)\n    and monthend_date < DATEADD(month,1,GETDATE())\n), dim_date_calc_1 as ( \n    select monthend_date,comparison_monthend_date,\n    DATEPART(day,comparison_monthend_date) as day_compare\n    from dim_date_pull\n), dim_date_calc_2 as ( \n    select monthend_date,\n    CAST(DATEADD(day,-day_compare,comparison_monthend_date) as date) as previous_year_monthend_date \n    from dim_date_calc_1\n)\n\nselect * from dim_date_calc_2", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.source_of_sales_change_lcarr.public.dim_date"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "monthend_date_calc", "calc__dim_monthend_date"], "unique_id": "model.source_of_sales_change_lcarr.calc__dim_monthend_date", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/monthend_date_calc/calc__dim_monthend_date.sql", "original_file_path": "models/set_up/monthend_date_calc/calc__dim_monthend_date.sql", "name": "calc__dim_monthend_date", "alias": "lcarr_sosx_calc__dim_monthend_date", "checksum": {"name": "sha256", "checksum": "7c5951d77597347e4dee3288ab6b66181bb74f918d514676564686a0a15927e2"}, "tags": [], "refs": [], "sources": [["public", "dim_date"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/monthend_date_calc/calc__dim_monthend_date.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false}, "created_at": 1656095234.237715, "compiled_sql": "with dim_date_pull as ( \n    select distinct monthend_date,CAST(DATEADD(month, -11, monthend_date) as date) as comparison_monthend_date\n    from \"cfa\".\"public\".\"dim_date\"\n    where monthend_date >= CAST('01-01-2019' as date)\n    and monthend_date < DATEADD(month,1,GETDATE())\n), dim_date_calc_1 as ( \n    select monthend_date,comparison_monthend_date,\n    DATEPART(day,comparison_monthend_date) as day_compare\n    from dim_date_pull\n), dim_date_calc_2 as ( \n    select monthend_date,\n    CAST(DATEADD(day,-day_compare,comparison_monthend_date) as date) as previous_year_monthend_date \n    from dim_date_calc_1\n)\n\nselect * from dim_date_calc_2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_calc__dim_monthend_date\""}, "model.source_of_sales_change_lcarr.stg__dim_fcr_loc_sales_elig": {"raw_sql": "with fcr_loc_sales_elig as ( \n    select location_num,monthend_date,\n    cm_num_actual_bus_days_cy as actual_days,\n    cm_num_avail_bus_days_cy as avail_days\n    from {{source('fin_lh','fcr_locations_sales_eligibility')}} \n    where monthend_date >= cast('{{var('first_date_same_store')}}' as date)\n)\nselect * from fcr_loc_sales_elig", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.source_of_sales_change_lcarr.fin_lh.fcr_locations_sales_eligibility"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "same_store_elig_calc", "stg__dim_fcr_loc_sales_elig"], "unique_id": "model.source_of_sales_change_lcarr.stg__dim_fcr_loc_sales_elig", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/same_store_elig_calc/stg__dim_fcr_loc_sales_elig.sql", "original_file_path": "models/set_up/same_store_elig_calc/stg__dim_fcr_loc_sales_elig.sql", "name": "stg__dim_fcr_loc_sales_elig", "alias": "lcarr_sosx_stg__dim_fcr_loc_sales_elig", "checksum": {"name": "sha256", "checksum": "c9e1a9ea1a0a521bb537d4a23dd01d67233f23631dd27706226331646d2aab6f"}, "tags": [], "refs": [], "sources": [["fin_lh", "fcr_locations_sales_eligibility"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/same_store_elig_calc/stg__dim_fcr_loc_sales_elig.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false}, "created_at": 1656095234.2400808, "compiled_sql": "with fcr_loc_sales_elig as ( \n    select location_num,monthend_date,\n    cm_num_actual_bus_days_cy as actual_days,\n    cm_num_avail_bus_days_cy as avail_days\n    from \"cfa\".\"fin_lh\".\"fcr_locations_sales_eligibility\" \n    where monthend_date >= cast('01-01-2021' as date)\n)\nselect * from fcr_loc_sales_elig", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_stg__dim_fcr_loc_sales_elig\""}, "model.source_of_sales_change_lcarr.stg__dim_same_store": {"raw_sql": "with fcr_loc_sales_elig as ( \n    select location_num,monthend_date,\n    actual_days, avail_days\n    from {{ref('stg__dim_fcr_loc_sales_elig')}}\n), dim_monthend_date as ( \n    select monthend_date,previous_year_monthend_date\n    from {{ref('calc__dim_monthend_date')}}\n), dim_same_store as ( \n    select a.location_num, a.monthend_date, '1 month' as look_back_period, \n    a.actual_days, a.avail_days, b.previous_year_monthend_date,\n    cast(a.actual_days as decimal)/a.avail_days as same_store_percent\n    from fcr_loc_sales_elig a \n    inner join dim_monthend_date b using (monthend_date)\n)\nselect * from dim_same_store", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.stg__dim_fcr_loc_sales_elig", "model.source_of_sales_change_lcarr.calc__dim_monthend_date"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "same_store_elig_calc", "stg__dim_same_store"], "unique_id": "model.source_of_sales_change_lcarr.stg__dim_same_store", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/same_store_elig_calc/stg__dim_same_store.sql", "original_file_path": "models/set_up/same_store_elig_calc/stg__dim_same_store.sql", "name": "stg__dim_same_store", "alias": "lcarr_sosx_stg__dim_same_store", "checksum": {"name": "sha256", "checksum": "b55f2065914e2cfb9a334f56f66970942d7d83aafee7441230dbd2ffdef958f9"}, "tags": [], "refs": [["stg__dim_fcr_loc_sales_elig"], ["calc__dim_monthend_date"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/same_store_elig_calc/stg__dim_same_store.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false}, "created_at": 1656095234.245595, "compiled_sql": "with fcr_loc_sales_elig as ( \n    select location_num,monthend_date,\n    actual_days, avail_days\n    from \"cfa\".\"public\".\"lcarr_sosx_stg__dim_fcr_loc_sales_elig\"\n), dim_monthend_date as ( \n    select monthend_date,previous_year_monthend_date\n    from \"cfa\".\"public\".\"lcarr_sosx_calc__dim_monthend_date\"\n), dim_same_store as ( \n    select a.location_num, a.monthend_date, '1 month' as look_back_period, \n    a.actual_days, a.avail_days, b.previous_year_monthend_date,\n    cast(a.actual_days as decimal)/a.avail_days as same_store_percent\n    from fcr_loc_sales_elig a \n    inner join dim_monthend_date b using (monthend_date)\n)\nselect * from dim_same_store", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_stg__dim_same_store\""}, "model.source_of_sales_change_lcarr.stg__fct_same_store": {"raw_sql": "with subset_1 as ( \n  select * \n  from {{ref('stg__dim_same_store')}}\n  where monthend_date = cast('02-28-2022' as date) \n), subset_2 as ( \n  select * \n  from {{ref('stg__dim_same_store')}}\n  where monthend_date = cast('02-28-2021' as date) \n), current_comparison as (\n  select s1.location_num,\n  s1.look_back_period,s1.monthend_date,\n  s1.actual_days as current_actual_days,s1.avail_days as current_avail_days,\n  s1.same_store_percent as current_same_store_percent,\n  s1.previous_year_monthend_date,\n  s2.monthend_date as date_check,\n  s2.actual_days as previous_actual_days,\n  s2.avail_days as previous_avail_days,\n  s2.same_store_percent as previous_same_store_percent\n  from subset_1 s1\n  inner join subset_2 s2\n  on s1.location_num = s2.location_num \n  and s1.look_back_period = s2.look_back_period\n  and s1.previous_year_monthend_date = s2.monthend_date\n), same_store_eligibility_calc as ( \n  select location_num,look_back_period,monthend_date,\n  current_actual_days,current_avail_days,current_same_store_percent,\n  previous_year_monthend_date,previous_actual_days,\n  previous_avail_days,previous_same_store_percent,\n  case when current_same_store_percent >= 0.90\n  and previous_same_store_percent >= 0.90 then 1 else 0 end as same_store_eligible\n  from current_comparison\n), same_store_final_output as (\n  select location_num,look_back_period,monthend_date,\n  current_actual_days as actual_days,current_avail_days as avail_days,\n  same_store_eligible from same_store_eligibility_calc\n  union \n  select location_num,look_back_period,previous_year_monthend_date as monthend_date,\n  previous_actual_days as actual_days,previous_avail_days as avail_days,\n  same_store_eligible from same_store_eligibility_calc\n)\nselect * from same_store_final_output", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.stg__dim_same_store", "model.source_of_sales_change_lcarr.stg__dim_same_store"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "same_store_elig_calc", "stg__fct_same_store"], "unique_id": "model.source_of_sales_change_lcarr.stg__fct_same_store", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/same_store_elig_calc/stg__fct_same_store.sql", "original_file_path": "models/set_up/same_store_elig_calc/stg__fct_same_store.sql", "name": "stg__fct_same_store", "alias": "lcarr_sosx_stg__fct_same_store", "checksum": {"name": "sha256", "checksum": "744403e304784299314c083662b43a89809a1a78040301f3ab168c56fd0fdc74"}, "tags": [], "refs": [["stg__dim_same_store"], ["stg__dim_same_store"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/same_store_elig_calc/stg__fct_same_store.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false}, "created_at": 1656095234.248018, "compiled_sql": "with subset_1 as ( \n  select * \n  from \"cfa\".\"public\".\"lcarr_sosx_stg__dim_same_store\"\n  where monthend_date = cast('02-28-2022' as date) \n), subset_2 as ( \n  select * \n  from \"cfa\".\"public\".\"lcarr_sosx_stg__dim_same_store\"\n  where monthend_date = cast('02-28-2021' as date) \n), current_comparison as (\n  select s1.location_num,\n  s1.look_back_period,s1.monthend_date,\n  s1.actual_days as current_actual_days,s1.avail_days as current_avail_days,\n  s1.same_store_percent as current_same_store_percent,\n  s1.previous_year_monthend_date,\n  s2.monthend_date as date_check,\n  s2.actual_days as previous_actual_days,\n  s2.avail_days as previous_avail_days,\n  s2.same_store_percent as previous_same_store_percent\n  from subset_1 s1\n  inner join subset_2 s2\n  on s1.location_num = s2.location_num \n  and s1.look_back_period = s2.look_back_period\n  and s1.previous_year_monthend_date = s2.monthend_date\n), same_store_eligibility_calc as ( \n  select location_num,look_back_period,monthend_date,\n  current_actual_days,current_avail_days,current_same_store_percent,\n  previous_year_monthend_date,previous_actual_days,\n  previous_avail_days,previous_same_store_percent,\n  case when current_same_store_percent >= 0.90\n  and previous_same_store_percent >= 0.90 then 1 else 0 end as same_store_eligible\n  from current_comparison\n), same_store_final_output as (\n  select location_num,look_back_period,monthend_date,\n  current_actual_days as actual_days,current_avail_days as avail_days,\n  same_store_eligible from same_store_eligibility_calc\n  union \n  select location_num,look_back_period,previous_year_monthend_date as monthend_date,\n  previous_actual_days as actual_days,previous_avail_days as avail_days,\n  same_store_eligible from same_store_eligibility_calc\n)\nselect * from same_store_final_output", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_stg__fct_same_store\""}, "model.source_of_sales_change_lcarr.tender": {"raw_sql": "with fct_tender as ( \n    select business_date, location_num, trans_id,\n    tender_description, destination_desc\n    from {{ ref('stg__fct_tender')}}\n), location as ( \n    select location_num, service_team_name, location_type_code,\n    region_name, dma_name \n    from {{ ref('stg__dim_location')}}\n), tender as ( \n    select business_date, location_num, trans_id, \n       -- destination_desc, tender_description, tender_type, \n       max(case when tender_description = 'Credit' then 1\n            when tender_description in ('Exact Dollar', 'On Demand', 'CFA Card', '$20', 'Cash', 'Next Dollar', '$10') then 0\n\t        when tender_description not like '%Credit%'\n\t             or destination_desc='' or destination_desc=' ' or destination_desc is null\n\t             or destination_desc='Other' then 0\n\t   else 1 end) as credit_flag\n from fct_tender\n inner join location using (location_num) \n group by 1, 2, 3\n)\n\nselect *\nfrom tender", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.stg__fct_tender", "model.source_of_sales_change_lcarr.stg__dim_location"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "details_transaction", "tender"], "unique_id": "model.source_of_sales_change_lcarr.tender", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/details_transaction/tender.sql", "original_file_path": "models/set_up/details_transaction/tender.sql", "name": "tender", "alias": "lcarr_sosx_tender", "checksum": {"name": "sha256", "checksum": "11dc313569a488bfbfec4846a75ef9681b1a967539609952fea76a46356f265c"}, "tags": [], "refs": [["stg__fct_tender"], ["stg__dim_location"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/details_transaction/tender.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.2618098, "compiled_sql": "with fct_tender as ( \n    select business_date, location_num, trans_id,\n    tender_description, destination_desc\n    from \"cfa\".\"public\".\"lcarr_sosx_stg__fct_tender\"\n), location as ( \n    select location_num, service_team_name, location_type_code,\n    region_name, dma_name \n    from \"cfa\".\"public\".\"lcarr_sosx_stg__dim_location\"\n), tender as ( \n    select business_date, location_num, trans_id, \n       -- destination_desc, tender_description, tender_type, \n       max(case when tender_description = 'Credit' then 1\n            when tender_description in ('Exact Dollar', 'On Demand', 'CFA Card', '$20', 'Cash', 'Next Dollar', '$10') then 0\n\t        when tender_description not like '%Credit%'\n\t             or destination_desc='' or destination_desc=' ' or destination_desc is null\n\t             or destination_desc='Other' then 0\n\t   else 1 end) as credit_flag\n from fct_tender\n inner join location using (location_num) \n group by 1, 2, 3\n)\n\nselect *\nfrom tender", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_tender\""}, "model.source_of_sales_change_lcarr.item": {"raw_sql": "with fct_item as ( \n    select business_date, location_num, trans_id, pin,\n    item_sold_count, item_promo_count\n    from {{ ref('stg__fct_item')}}\n), location as ( \n    select location_num, service_team_name, location_type_code,\n    region_name, dma_name \n    from {{ ref('stg__dim_location')}}\n), dim_item as ( \n    select pin, hierarchy_1\n    from {{ ref('stg__dim_item')}}\n), item as ( \n    select business_date, location_num, trans_id,\n        sum(item_sold_count) as total_items_sold_count,\n        sum(item_promo_count) as total_items_promo_count\n    from fct_item\n    inner join dim_item using (pin)\n    inner join location using (location_num)\n    where hierarchy_1 <> ''\n        and hierarchy_1 <> ' '\n        and hierarchy_1 is not null\n        and hierarchy_1 not in ('Non-Food','Miscellaneous') \n    group by 1, 2, 3\n)\n\nselect *\nfrom item", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.stg__fct_item", "model.source_of_sales_change_lcarr.stg__dim_location", "model.source_of_sales_change_lcarr.stg__dim_item"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "details_transaction", "item"], "unique_id": "model.source_of_sales_change_lcarr.item", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/details_transaction/item.sql", "original_file_path": "models/set_up/details_transaction/item.sql", "name": "item", "alias": "lcarr_sosx_item", "checksum": {"name": "sha256", "checksum": "a57a53a0a7a663ca1fd70ded161bbf3ecc77f6d95806f5ef10194d13095da359"}, "tags": [], "refs": [["stg__fct_item"], ["stg__dim_location"], ["stg__dim_item"]], "sources": [], "description": "", "columns": {"trans_id": {"name": "trans_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "source_of_sales_change_lcarr://models/schema.yml", "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/details_transaction/item.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.361521, "compiled_sql": "with fct_item as ( \n    select business_date, location_num, trans_id, pin,\n    item_sold_count, item_promo_count\n    from \"cfa\".\"public\".\"lcarr_sosx_stg__fct_item\"\n), location as ( \n    select location_num, service_team_name, location_type_code,\n    region_name, dma_name \n    from \"cfa\".\"public\".\"lcarr_sosx_stg__dim_location\"\n), dim_item as ( \n    select pin, hierarchy_1\n    from \"cfa\".\"public\".\"lcarr_sosx_stg__dim_item\"\n), item as ( \n    select business_date, location_num, trans_id,\n        sum(item_sold_count) as total_items_sold_count,\n        sum(item_promo_count) as total_items_promo_count\n    from fct_item\n    inner join dim_item using (pin)\n    inner join location using (location_num)\n    where hierarchy_1 <> ''\n        and hierarchy_1 <> ' '\n        and hierarchy_1 is not null\n        and hierarchy_1 not in ('Non-Food','Miscellaneous') \n    group by 1, 2, 3\n)\n\nselect *\nfrom item", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_item\""}, "model.source_of_sales_change_lcarr.trans_item": {"raw_sql": "with trans_detail as\n(select business_date, location_num, trans_id, \n        sales_sub_total, cfa_one_id, customer_hash, \n        visit_count, credit_flag, quarter, destination_desc, daypart, \n        monthend_date, region_name, dma_name, location_type_code, service_team_name\n from {{ref('trans_detail')}}\n),\n\nitem as\n(select business_date, location_num, trans_id, \n        total_items_sold_count, total_items_promo_count\n from {{ref('item')}}\n),\n\ntrans_item as\n(select business_date, location_num, trans_id, \n        sales_sub_total, cfa_one_id, customer_hash, \n        visit_count, credit_flag, quarter, destination_desc, daypart, \n        monthend_date, region_name, dma_name, location_type_code, service_team_name,\n        nvl(total_items_sold_count, 0) as total_items_sold_count, \n        nvl(total_items_promo_count, 0) as total_items_promo_count\n from trans_detail\n inner join item using (business_date, location_num, trans_id)\n)\n\nselect *\nfrom trans_item", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.trans_detail", "model.source_of_sales_change_lcarr.item"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "details_transaction", "trans_item"], "unique_id": "model.source_of_sales_change_lcarr.trans_item", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/details_transaction/trans_item.sql", "original_file_path": "models/set_up/details_transaction/trans_item.sql", "name": "trans_item", "alias": "lcarr_sosx_trans_item", "checksum": {"name": "sha256", "checksum": "303bd77841f582aaffc9e26e9281d73a8ccd781beb9b030d228f08a4cc643fd2"}, "tags": [], "refs": [["trans_detail"], ["item"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/details_transaction/trans_item.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.2679622, "compiled_sql": "with trans_detail as\n(select business_date, location_num, trans_id, \n        sales_sub_total, cfa_one_id, customer_hash, \n        visit_count, credit_flag, quarter, destination_desc, daypart, \n        monthend_date, region_name, dma_name, location_type_code, service_team_name\n from \"cfa\".\"public\".\"lcarr_sosx_trans_detail\"\n),\n\nitem as\n(select business_date, location_num, trans_id, \n        total_items_sold_count, total_items_promo_count\n from \"cfa\".\"public\".\"lcarr_sosx_item\"\n),\n\ntrans_item as\n(select business_date, location_num, trans_id, \n        sales_sub_total, cfa_one_id, customer_hash, \n        visit_count, credit_flag, quarter, destination_desc, daypart, \n        monthend_date, region_name, dma_name, location_type_code, service_team_name,\n        nvl(total_items_sold_count, 0) as total_items_sold_count, \n        nvl(total_items_promo_count, 0) as total_items_promo_count\n from trans_detail\n inner join item using (business_date, location_num, trans_id)\n)\n\nselect *\nfrom trans_item", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_trans_item\""}, "model.source_of_sales_change_lcarr.trans_detail": {"raw_sql": "with transaction as\n(select business_date, location_num, trans_id,\n        tax_amount, delivery_tip, destination_desc, dest_alias, daypart,\n        sales_sub_total, cfa_one_id, customer_hash, visit_count, quarter, \n        monthend_date, region_name, dma_name, location_type_code, service_team_name\n from {{ref('transaction')}}\n),\n\ntender as\n(select business_date, location_num, trans_id, \n        credit_flag\n from {{ref('tender')}}\n),\n\ntrans_detail as\n(select business_date, location_num, trans_id, daypart,\n        sales_sub_total, cfa_one_id, customer_hash, visit_count,\n        destination_desc, dest_alias, credit_flag, quarter, \n        monthend_date, region_name, dma_name, location_type_code, service_team_name\n from transaction\n inner join tender using (business_date, location_num, trans_id)\n)\n\nselect * \nfrom trans_detail", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.transaction", "model.source_of_sales_change_lcarr.tender"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "details_transaction", "trans_detail"], "unique_id": "model.source_of_sales_change_lcarr.trans_detail", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/details_transaction/trans_detail.sql", "original_file_path": "models/set_up/details_transaction/trans_detail.sql", "name": "trans_detail", "alias": "lcarr_sosx_trans_detail", "checksum": {"name": "sha256", "checksum": "4ef959eac3188c137c3aed757bc60c03979247b5b6430645a156b95f3ab206e5"}, "tags": [], "refs": [["transaction"], ["tender"]], "sources": [], "description": "", "columns": {"trans_id": {"name": "trans_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "source_of_sales_change_lcarr://models/schema.yml", "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/details_transaction/trans_detail.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.360256, "compiled_sql": "with transaction as\n(select business_date, location_num, trans_id,\n        tax_amount, delivery_tip, destination_desc, dest_alias, daypart,\n        sales_sub_total, cfa_one_id, customer_hash, visit_count, quarter, \n        monthend_date, region_name, dma_name, location_type_code, service_team_name\n from \"cfa\".\"public\".\"lcarr_sosx_transaction\"\n),\n\ntender as\n(select business_date, location_num, trans_id, \n        credit_flag\n from \"cfa\".\"public\".\"lcarr_sosx_tender\"\n),\n\ntrans_detail as\n(select business_date, location_num, trans_id, daypart,\n        sales_sub_total, cfa_one_id, customer_hash, visit_count,\n        destination_desc, dest_alias, credit_flag, quarter, \n        monthend_date, region_name, dma_name, location_type_code, service_team_name\n from transaction\n inner join tender using (business_date, location_num, trans_id)\n)\n\nselect * \nfrom trans_detail", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_trans_detail\""}, "model.source_of_sales_change_lcarr.transaction": {"raw_sql": "with fct_transaction as ( \n    select business_date, location_num, trans_id,\n    monthend_date, quarter, end_hour_min,\n    destination_code, destination_desc, \n    tax_amount, delivery_tip, sales_sub_total,\n    cfa_one_id, customer_hash\n    from {{ ref('stg__fct_transaction')}}\n), location as ( \n    select location_num, service_team_name, location_type_code,\n        region_name, dma_name \n    from {{ ref('stg__dim_location')}}\n), daypart as ( \n    select end_hour_min,daypart\n    from {{ref('stg__dim_daypart')}} \n), destination as ( \n    select destination_code, destination_desc, dest_alias\n    from {{ref('stg__dim_destination')}}\n), transaction as ( \n    select business_date, location_num, trans_id, daypart,\n        monthend_date, quarter,\n        destination_code, destination_desc, dest_alias,\n        service_team_name, location_type_code, \n        region_name, dma_name,\n        cfa_one_id, customer_hash,\n        tax_amount, delivery_tip, \n        sales_sub_total,\n        case when customer_hash <> '' and customer_hash <> ' ' \n             and  customer_hash is not null\n        then 1 else 0 end as visit_count\n    from fct_transaction\n    inner join location using (location_num)\n    inner join destination using (destination_code,destination_desc) \n    inner join daypart using (end_hour_min)\n)\n\nselect *\nfrom transaction", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.stg__fct_transaction", "model.source_of_sales_change_lcarr.stg__dim_location", "model.source_of_sales_change_lcarr.stg__dim_daypart", "model.source_of_sales_change_lcarr.stg__dim_destination"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "details_transaction", "transaction"], "unique_id": "model.source_of_sales_change_lcarr.transaction", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/details_transaction/transaction.sql", "original_file_path": "models/set_up/details_transaction/transaction.sql", "name": "transaction", "alias": "lcarr_sosx_transaction", "checksum": {"name": "sha256", "checksum": "779ebbb8c0e50a259edaa2c378d7bd69c14873d335a09704499abc6cd4530dab"}, "tags": [], "refs": [["stg__fct_transaction"], ["stg__dim_location"], ["stg__dim_daypart"], ["stg__dim_destination"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/details_transaction/transaction.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095234.273092, "compiled_sql": "with fct_transaction as ( \n    select business_date, location_num, trans_id,\n    monthend_date, quarter, end_hour_min,\n    destination_code, destination_desc, \n    tax_amount, delivery_tip, sales_sub_total,\n    cfa_one_id, customer_hash\n    from \"cfa\".\"public\".\"lcarr_sosx_stg__fct_transaction\"\n), location as ( \n    select location_num, service_team_name, location_type_code,\n        region_name, dma_name \n    from \"cfa\".\"public\".\"lcarr_sosx_stg__dim_location\"\n), daypart as ( \n    select end_hour_min,daypart\n    from \"cfa\".\"public\".\"lcarr_sosx_stg__dim_daypart\" \n), destination as ( \n    select destination_code, destination_desc, dest_alias\n    from \"cfa\".\"public\".\"lcarr_sosx_stg__dim_destination\"\n), transaction as ( \n    select business_date, location_num, trans_id, daypart,\n        monthend_date, quarter,\n        destination_code, destination_desc, dest_alias,\n        service_team_name, location_type_code, \n        region_name, dma_name,\n        cfa_one_id, customer_hash,\n        tax_amount, delivery_tip, \n        sales_sub_total,\n        case when customer_hash <> '' and customer_hash <> ' ' \n             and  customer_hash is not null\n        then 1 else 0 end as visit_count\n    from fct_transaction\n    inner join location using (location_num)\n    inner join destination using (destination_code,destination_desc) \n    inner join daypart using (end_hour_min)\n)\n\nselect *\nfrom transaction", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_transaction\""}, "model.source_of_sales_change_lcarr.stg__dim_location": {"raw_sql": "with location as (\n    select location_num, service_team_name,\n        case when location_type_code in ('FSU','MALL','DTO') \n             then location_type_code \n        else 'SAT' end as location_type_code,\n        region_name, dma_name \n    from {{source('public','location_attributes')}}\n    where concept_code = 'CFA'\n)\n\nselect *\nfrom location", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.source_of_sales_change_lcarr.public.location_attributes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "stage_transaction", "stg__dim_location"], "unique_id": "model.source_of_sales_change_lcarr.stg__dim_location", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/stage_transaction/stg__dim_location.sql", "original_file_path": "models/set_up/stage_transaction/stg__dim_location.sql", "name": "stg__dim_location", "alias": "lcarr_sosx_stg__dim_location", "checksum": {"name": "sha256", "checksum": "bc0698695a34790b67689a103ae972cbc22a58abc7064387b9a60a874e1943f6"}, "tags": [], "refs": [], "sources": [["public", "location_attributes"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/stage_transaction/stg__dim_location.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "view"}, "created_at": 1656095234.276341, "compiled_sql": "with location as (\n    select location_num, service_team_name,\n        case when location_type_code in ('FSU','MALL','DTO') \n             then location_type_code \n        else 'SAT' end as location_type_code,\n        region_name, dma_name \n    from \"cfa\".\"public\".\"location_attributes\"\n    where concept_code = 'CFA'\n)\n\nselect *\nfrom location", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_stg__dim_location\""}, "model.source_of_sales_change_lcarr.stg__dim_transaction_status": {"raw_sql": "with trans_status as ( \n    select trans_status_id as status, cancelled_flg\n    from {{ source('pos','transaction_status')}}\n)\n\nselect * \nfrom trans_status", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.source_of_sales_change_lcarr.pos.transaction_status"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "stage_transaction", "stg__dim_transaction_status"], "unique_id": "model.source_of_sales_change_lcarr.stg__dim_transaction_status", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/stage_transaction/stg__dim_transaction_status.sql", "original_file_path": "models/set_up/stage_transaction/stg__dim_transaction_status.sql", "name": "stg__dim_transaction_status", "alias": "lcarr_sosx_stg__dim_transaction_status", "checksum": {"name": "sha256", "checksum": "c7bc5be2fcd103ed8ad4b4088bad72f19f1ba8d0c0e60d4f4679f81b280d5b30"}, "tags": [], "refs": [], "sources": [["pos", "transaction_status"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/stage_transaction/stg__dim_transaction_status.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "view"}, "created_at": 1656095234.279496, "compiled_sql": "with trans_status as ( \n    select trans_status_id as status, cancelled_flg\n    from \"cfa\".\"pos\".\"transaction_status\"\n)\n\nselect * \nfrom trans_status", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_stg__dim_transaction_status\""}, "model.source_of_sales_change_lcarr.stg__dim_destination": {"raw_sql": "with dim_destination as\n(select destination_code, destination_desc, dest_alias\n from {{source('common', 'd_destination')}}\n ),\n\n refund_empty as \n (select 'REFUND TRANS' as destination_code, '' as destination_desc, \n          'Refund' as dest_alias\n ),\n\n destination as\n (select destination_code, destination_desc, dest_alias from dim_destination\n  union all\n  select destination_code, destination_desc, dest_alias from refund_empty\n)\n\nselect *\nfrom destination", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.source_of_sales_change_lcarr.common.d_destination"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "stage_transaction", "stg__dim_destination"], "unique_id": "model.source_of_sales_change_lcarr.stg__dim_destination", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/stage_transaction/stg__dim_destination.sql", "original_file_path": "models/set_up/stage_transaction/stg__dim_destination.sql", "name": "stg__dim_destination", "alias": "lcarr_sosx_stg__dim_destination", "checksum": {"name": "sha256", "checksum": "ec054aa6025ed1f3c12df5f09c709ed827ef54257351ae3f6cc669b87acd2e24"}, "tags": [], "refs": [], "sources": [["common", "d_destination"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/stage_transaction/stg__dim_destination.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "view"}, "created_at": 1656095234.282078, "compiled_sql": "with dim_destination as\n(select destination_code, destination_desc, dest_alias\n from \"cfa\".\"common\".\"d_destination\"\n ),\n\n refund_empty as \n (select 'REFUND TRANS' as destination_code, '' as destination_desc, \n          'Refund' as dest_alias\n ),\n\n destination as\n (select destination_code, destination_desc, dest_alias from dim_destination\n  union all\n  select destination_code, destination_desc, dest_alias from refund_empty\n)\n\nselect *\nfrom destination", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_stg__dim_destination\""}, "model.source_of_sales_change_lcarr.stg__dim_daypart": {"raw_sql": "with dim_time as\n(select hour_min as end_hour_min, daypart\n from {{ source('apps', 'time_d')}}\n)\n\nselect *\nfrom dim_time", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.source_of_sales_change_lcarr.apps.time_d"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "stage_transaction", "stg__dim_daypart"], "unique_id": "model.source_of_sales_change_lcarr.stg__dim_daypart", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/stage_transaction/stg__dim_daypart.sql", "original_file_path": "models/set_up/stage_transaction/stg__dim_daypart.sql", "name": "stg__dim_daypart", "alias": "lcarr_sosx_stg__dim_daypart", "checksum": {"name": "sha256", "checksum": "03edc59ae1b27f9463c445691eb4d374745eb2150f05d82d9fc64431227ad76d"}, "tags": [], "refs": [], "sources": [["apps", "time_d"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/stage_transaction/stg__dim_daypart.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "view"}, "created_at": 1656095234.284336, "compiled_sql": "with dim_time as\n(select hour_min as end_hour_min, daypart\n from \"cfa\".\"apps\".\"time_d\"\n)\n\nselect *\nfrom dim_time", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_stg__dim_daypart\""}, "model.source_of_sales_change_lcarr.stg__fct_item": {"raw_sql": "{% set locations = var('locations') %}\n\nwith trans_status as ( \n    select status, cancelled_flg\n    from {{ref('stg__dim_transaction_status')}}\n), item as (\n    select business_date, location_num, trans_id,\n    item_pin as pin, item_sold_count, item_promo_count\n    from {{source('pos','trans_item')}}\n    inner join trans_status using (status)\n    where trans_status.cancelled_flg is false\n    and (business_date between '{{var('date_1_start')}}' and '{{var('date_1_end')}}'\n    or business_date between '{{var('date_2_start')}}' and '{{var('date_2_end')}}')\n    {%- if locations|length > 0 %}\n    and location_num in {{var('locations')}}\n    {%- endif -%}\n)\n\nselect *\nfrom item", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.source_of_sales_change_lcarr.pos.trans_item", "model.source_of_sales_change_lcarr.stg__dim_transaction_status"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "stage_transaction", "stg__fct_item"], "unique_id": "model.source_of_sales_change_lcarr.stg__fct_item", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/stage_transaction/stg__fct_item.sql", "original_file_path": "models/set_up/stage_transaction/stg__fct_item.sql", "name": "stg__fct_item", "alias": "lcarr_sosx_stg__fct_item", "checksum": {"name": "sha256", "checksum": "e5509accfaa74a99e25d8d27210a2b3481826ebbf33d1ab28bf08709d09432e9"}, "tags": [], "refs": [["stg__dim_transaction_status"]], "sources": [["pos", "trans_item"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/stage_transaction/stg__fct_item.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "view"}, "created_at": 1656095234.286558, "compiled_sql": "\n\nwith trans_status as ( \n    select status, cancelled_flg\n    from \"cfa\".\"public\".\"lcarr_sosx_stg__dim_transaction_status\"\n), item as (\n    select business_date, location_num, trans_id,\n    item_pin as pin, item_sold_count, item_promo_count\n    from \"cfa\".\"pos\".\"trans_item\"\n    inner join trans_status using (status)\n    where trans_status.cancelled_flg is false\n    and (business_date between '2022-02-01' and '2022-02-28'\n    or business_date between '2021-02-01' and '2021-02-28'))\n\nselect *\nfrom item", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_stg__fct_item\""}, "model.source_of_sales_change_lcarr.stg__fct_transaction": {"raw_sql": "{{ log(var('date_1_start'), info=true) }}\n{{ log(var('date_1_end'), info=true) }}\n{{ log(var('locations'), info=true) }}\n\n{% set locations = var('locations') %}\n\nwith transaction as \n( \n    select business_date,location_num,trans_id,end_time,end_hour_min,\n    date_part(qtr,business_date)||' '||date_part(year,business_date) as quarter,\n    cast(last_day(business_date) as date) as monthend_date,\n    destination_code,destination_desc,cfa_one_id,customer_hash,\n    sales_sub_total,tax_amount,delivery_tip\n    from {{source('pos','trans_header')}}\n    where cancelled_flg = 'false'\n    and (business_date between '{{var('date_1_start')}}' and '{{var('date_1_end')}}'\n    or business_date between '{{var('date_2_start')}}' and '{{var('date_2_end')}}')\n    {%- if locations|length > 0 %}\n    and location_num in {{var('locations')}}\n    {%- endif -%}\n)\n\nselect *\nfrom transaction", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.source_of_sales_change_lcarr.pos.trans_header"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "stage_transaction", "stg__fct_transaction"], "unique_id": "model.source_of_sales_change_lcarr.stg__fct_transaction", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/stage_transaction/stg__fct_transaction.sql", "original_file_path": "models/set_up/stage_transaction/stg__fct_transaction.sql", "name": "stg__fct_transaction", "alias": "lcarr_sosx_stg__fct_transaction", "checksum": {"name": "sha256", "checksum": "ccd43120599b039689f7e22228091897586842aa4d7648d07212e7eb5183c924"}, "tags": [], "refs": [], "sources": [["pos", "trans_header"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/stage_transaction/stg__fct_transaction.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "view"}, "created_at": 1656095234.294924, "compiled_sql": "\n\n\n\n\n\nwith transaction as \n( \n    select business_date,location_num,trans_id,end_time,end_hour_min,\n    date_part(qtr,business_date)||' '||date_part(year,business_date) as quarter,\n    cast(last_day(business_date) as date) as monthend_date,\n    destination_code,destination_desc,cfa_one_id,customer_hash,\n    sales_sub_total,tax_amount,delivery_tip\n    from \"cfa\".\"pos\".\"trans_header\"\n    where cancelled_flg = 'false'\n    and (business_date between '2022-02-01' and '2022-02-28'\n    or business_date between '2021-02-01' and '2021-02-28'))\n\nselect *\nfrom transaction", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_stg__fct_transaction\""}, "model.source_of_sales_change_lcarr.stg__dim_item": {"raw_sql": "with dim_item as\n(select pin, hierarchy_1, short_name\n from {{source('apps', 'dim_item')}})\n\nselect *\nfrom dim_item", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.source_of_sales_change_lcarr.apps.dim_item"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "stage_transaction", "stg__dim_item"], "unique_id": "model.source_of_sales_change_lcarr.stg__dim_item", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/stage_transaction/stg__dim_item.sql", "original_file_path": "models/set_up/stage_transaction/stg__dim_item.sql", "name": "stg__dim_item", "alias": "lcarr_sosx_stg__dim_item", "checksum": {"name": "sha256", "checksum": "c654ea55b3acd73b1ad0336e577b0881a71e4c166339c970d254910b765bba8b"}, "tags": [], "refs": [], "sources": [["apps", "dim_item"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/stage_transaction/stg__dim_item.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "view"}, "created_at": 1656095234.305144, "compiled_sql": "with dim_item as\n(select pin, hierarchy_1, short_name\n from \"cfa\".\"apps\".\"dim_item\")\n\nselect *\nfrom dim_item", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_stg__dim_item\""}, "model.source_of_sales_change_lcarr.stg__fct_tender": {"raw_sql": "{% set locations = var('locations') %}\n\nwith trans_status as ( \n    select status, cancelled_flg\n    from {{ref('stg__dim_transaction_status')}}\n), tender as (\n    select business_date,location_num,trans_id,\n        destination_code,destination_desc,tender_type,tender_description\n    from {{source('pos','trans_tender')}}\n    inner join trans_status using (status)\n    where trans_status.cancelled_flg is false\n    and (business_date between '{{var('date_1_start')}}' and '{{var('date_1_end')}}'\n    or business_date between '{{var('date_2_start')}}' and '{{var('date_2_end')}}')\n    {%- if locations|length > 0 %}\n    and location_num in {{var('locations')}}\n    {%- endif -%}\n)\n\nselect *\nfrom tender", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.source_of_sales_change_lcarr.pos.trans_tender", "model.source_of_sales_change_lcarr.stg__dim_transaction_status"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "stage_transaction", "stg__fct_tender"], "unique_id": "model.source_of_sales_change_lcarr.stg__fct_tender", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/stage_transaction/stg__fct_tender.sql", "original_file_path": "models/set_up/stage_transaction/stg__fct_tender.sql", "name": "stg__fct_tender", "alias": "lcarr_sosx_stg__fct_tender", "checksum": {"name": "sha256", "checksum": "fe6b171eba7865fa967a9d3217ce168e55dd94e8cbf606ec8f7c4905669761ac"}, "tags": [], "refs": [["stg__dim_transaction_status"]], "sources": [["pos", "trans_tender"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/stage_transaction/stg__fct_tender.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "view"}, "created_at": 1656095234.3114371, "compiled_sql": "\n\nwith trans_status as ( \n    select status, cancelled_flg\n    from \"cfa\".\"public\".\"lcarr_sosx_stg__dim_transaction_status\"\n), tender as (\n    select business_date,location_num,trans_id,\n        destination_code,destination_desc,tender_type,tender_description\n    from \"cfa\".\"pos\".\"trans_tender\"\n    inner join trans_status using (status)\n    where trans_status.cancelled_flg is false\n    and (business_date between '2022-02-01' and '2022-02-28'\n    or business_date between '2021-02-01' and '2021-02-28'))\n\nselect *\nfrom tender", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_stg__fct_tender\""}, "model.source_of_sales_change_lcarr.calc__error": {"raw_sql": "with fcs_adj_sales as ( \n    select location_num,monthend_date, \n    month_sales,adjusted_sales,month_sales_pg1,adjusted_sales_pg1\n    from {{ref('stg__dim_adj_sales')}}\n), location_attributes as ( \n    select location_num, dma_name\n    from {{ref('calc__dim_monthend_date')}}\n), fcs_adj_sales_loc as ( \n    select b.dma_name,a.location_num,a.monthend_date,'1 month' as look_back_period,\n    a.month_sales,a.adjusted_sales,a.month_sales_pg1,a.adjusted_sales_pg1\n    from fcs_adj_sales a \n    inner join location_attributes b using (location_num)\n)\nselect * from fcs_adj_sales_loc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.stg__dim_adj_sales", "model.source_of_sales_change_lcarr.calc__dim_monthend_date"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "price_index_calc", "calc__error"], "unique_id": "model.source_of_sales_change_lcarr.calc__error", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/price_index_calc/calc__error.sql", "original_file_path": "models/set_up/price_index_calc/calc__error.sql", "name": "calc__error", "alias": "lcarr_sosx_calc__error", "checksum": {"name": "sha256", "checksum": "7c6aac86e95e4fe929bd51987de2479e98ffd393a33bd92fc4e79229de59ba5b"}, "tags": [], "refs": [["stg__dim_adj_sales"], ["calc__dim_monthend_date"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/price_index_calc/calc__error.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false}, "created_at": 1656095234.318926, "compiled_sql": "with fcs_adj_sales as ( \n    select location_num,monthend_date, \n    month_sales,adjusted_sales,month_sales_pg1,adjusted_sales_pg1\n    from \"cfa\".\"public\".\"lcarr_sosx_stg__dim_adj_sales\"\n), location_attributes as ( \n    select location_num, dma_name\n    from \"cfa\".\"public\".\"lcarr_sosx_calc__dim_monthend_date\"\n), fcs_adj_sales_loc as ( \n    select b.dma_name,a.location_num,a.monthend_date,'1 month' as look_back_period,\n    a.month_sales,a.adjusted_sales,a.month_sales_pg1,a.adjusted_sales_pg1\n    from fcs_adj_sales a \n    inner join location_attributes b using (location_num)\n)\nselect * from fcs_adj_sales_loc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_calc__error\""}, "model.source_of_sales_change_lcarr.stg__dim_adj_sales": {"raw_sql": "with fcs_adjusted_sales as ( \n    SELECT location_num,\n    monthend_date,\n    month_sales,\n    adjusted_sales,\n    month_sales_pg1,\n    adjusted_sales_pg1\n    FROM {{source('prodmix_dl','fcs_adjusted_sales')}} sales\n    where monthend_date = CAST('{{var('monthend_date_1')}}' as date)\n    or monthend_date = CAST('{{var('monthend_date_2')}}' as date)\n)\nselect * from fcs_adjusted_sales", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.source_of_sales_change_lcarr.prodmix_dl.fcs_adjusted_sales"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "price_index_calc", "stg__dim_adj_sales"], "unique_id": "model.source_of_sales_change_lcarr.stg__dim_adj_sales", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/price_index_calc/stg__dim_adj_sales.sql", "original_file_path": "models/set_up/price_index_calc/stg__dim_adj_sales.sql", "name": "stg__dim_adj_sales", "alias": "lcarr_sosx_stg__dim_adj_sales", "checksum": {"name": "sha256", "checksum": "a09c26d574dcca1fb0bd3e5461b15f1cb202777ac4de3897d8bff8fba822804f"}, "tags": [], "refs": [], "sources": [["prodmix_dl", "fcs_adjusted_sales"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/price_index_calc/stg__dim_adj_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false}, "created_at": 1656095234.321307, "compiled_sql": "with fcs_adjusted_sales as ( \n    SELECT location_num,\n    monthend_date,\n    month_sales,\n    adjusted_sales,\n    month_sales_pg1,\n    adjusted_sales_pg1\n    FROM \"cfa\".\"prodmix_dl\".\"fcs_adjusted_sales\" sales\n    where monthend_date = CAST('2021-02-28' as date)\n    or monthend_date = CAST('2022-02-28' as date)\n)\nselect * from fcs_adjusted_sales", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_stg__dim_adj_sales\""}, "model.source_of_sales_change_lcarr.calc__dim_price_index_3": {"raw_sql": "with min_monthend_date as ( \n    select look_back_period,same_store,min(monthend_date) as min_monthend_date\n    from {{ref('calc__dim_price_index_2')}}\n    group by 1,2\n), anchor_calc as ( \n    select m.look_back_period,m.same_store,m.min_monthend_date,bc.pg1_ratio as anchor_ratio\n    from min_monthend_date m\n    inner join {{ref('calc__dim_price_index_2')}} bc \n    on m.look_back_period = bc.look_back_period\n    and m.same_store = bc.same_store\n    and m.min_monthend_date = bc.monthend_date\n), market_big_join as (\n    select bc.*, ac.min_monthend_date, ac.anchor_ratio\n    from {{ref('calc__dim_price_index_2')}} bc \n    inner join anchor_calc ac\n    on bc.look_back_period = ac.look_back_period\n    and bc.same_store = ac.same_store\n), ratio_change as ( \n    select *, pg1_ratio/anchor_ratio as pg1_ratio_change\n    from market_big_join\n), price_index_final as ( \n    select look_back_period,monthend_date,same_store,actual_vs_pg1*pg1_ratio_change as price_index\n    from ratio_change\n)\nselect * from price_index_final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.calc__dim_price_index_2", "model.source_of_sales_change_lcarr.calc__dim_price_index_2", "model.source_of_sales_change_lcarr.calc__dim_price_index_2"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "price_index_calc", "calc__dim_price_index_3"], "unique_id": "model.source_of_sales_change_lcarr.calc__dim_price_index_3", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/price_index_calc/calc__dim_price_index_3.sql", "original_file_path": "models/set_up/price_index_calc/calc__dim_price_index_3.sql", "name": "calc__dim_price_index_3", "alias": "lcarr_sosx_calc__dim_price_index_3", "checksum": {"name": "sha256", "checksum": "5e2519d908772eb393a3d260a57aa49746812c9d49d166b275dd8bec07452f4e"}, "tags": [], "refs": [["calc__dim_price_index_2"], ["calc__dim_price_index_2"], ["calc__dim_price_index_2"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/price_index_calc/calc__dim_price_index_3.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false}, "created_at": 1656095234.32915, "compiled_sql": "with min_monthend_date as ( \n    select look_back_period,same_store,min(monthend_date) as min_monthend_date\n    from \"cfa\".\"public\".\"lcarr_sosx_calc__dim_price_index_2\"\n    group by 1,2\n), anchor_calc as ( \n    select m.look_back_period,m.same_store,m.min_monthend_date,bc.pg1_ratio as anchor_ratio\n    from min_monthend_date m\n    inner join \"cfa\".\"public\".\"lcarr_sosx_calc__dim_price_index_2\" bc \n    on m.look_back_period = bc.look_back_period\n    and m.same_store = bc.same_store\n    and m.min_monthend_date = bc.monthend_date\n), market_big_join as (\n    select bc.*, ac.min_monthend_date, ac.anchor_ratio\n    from \"cfa\".\"public\".\"lcarr_sosx_calc__dim_price_index_2\" bc \n    inner join anchor_calc ac\n    on bc.look_back_period = ac.look_back_period\n    and bc.same_store = ac.same_store\n), ratio_change as ( \n    select *, pg1_ratio/anchor_ratio as pg1_ratio_change\n    from market_big_join\n), price_index_final as ( \n    select look_back_period,monthend_date,same_store,actual_vs_pg1*pg1_ratio_change as price_index\n    from ratio_change\n)\nselect * from price_index_final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_calc__dim_price_index_3\""}, "model.source_of_sales_change_lcarr.calc__dim_price_index_2": {"raw_sql": "with add_same_store_flag as ( \n  SELECT a.dma_name,\n  a.location_num,\n  a.monthend_date,\n  a.look_back_period,\n  a.month_sales,\n  a.adjusted_sales,\n  a.month_sales_pg1,\n  a.adjusted_sales_pg1,\n  b.same_store_eligible\n  FROM {{ref('calc__dim_price_index_1')}} a\n  inner join {{ref('stg__fct_same_store')}} b\n  on a.location_num = b.location_num\n  and a.monthend_date = b.monthend_date \n), market_aggregation_all_stores as ( \n  select monthend_date,look_back_period,'All Stores' as same_store,\n  sum(month_sales) as market_month_sales,\n  sum(adjusted_sales) as market_adjusted_sales,\n  sum(month_sales_pg1) as market_month_sales_pg1,\n  sum(adjusted_sales_pg1) as market_adjusted_sales_pg1\n  from add_same_store_flag\n  group by 1,2\n), market_aggregation_same_stores as ( \n  select monthend_date,look_back_period,'Same Stores' as same_store,\n  sum(month_sales) as market_month_sales,\n  sum(adjusted_sales) as market_adjusted_sales,\n  sum(month_sales_pg1) as market_month_sales_pg1,\n  sum(adjusted_sales_pg1) as market_adjusted_sales_pg1\n  from add_same_store_flag\n  where same_store_eligible = 1\n  group by 1,2\n), union_all_same_store as ( \n  select monthend_date,look_back_period,same_store,\n  market_month_sales,market_adjusted_sales,\n  market_month_sales_pg1,market_adjusted_sales_pg1\n  from market_aggregation_all_stores\n  union\n  select monthend_date,look_back_period,same_store,\n  market_month_sales,market_adjusted_sales,\n  market_month_sales_pg1,market_adjusted_sales_pg1\n  from market_aggregation_same_stores\n), base_calcs as (\n  SELECT monthend_date,look_back_period,same_store,\n  market_month_sales,market_adjusted_sales,market_month_sales_pg1,market_adjusted_sales_pg1,\n  case when market_adjusted_sales_pg1 = 0.00 then 0.00 else \n  cast(market_month_sales_pg1/market_adjusted_sales_pg1 as float) end as pg1_ratio,\n  case when market_month_sales_pg1 = 0.00 then 0.00 else\n  cast(market_month_sales/market_month_sales_pg1 as float) end as actual_vs_pg1\n  from union_all_same_store\n)\nselect * from base_calcs", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.calc__dim_price_index_1", "model.source_of_sales_change_lcarr.stg__fct_same_store"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "price_index_calc", "calc__dim_price_index_2"], "unique_id": "model.source_of_sales_change_lcarr.calc__dim_price_index_2", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/price_index_calc/calc__dim_price_index_2.sql", "original_file_path": "models/set_up/price_index_calc/calc__dim_price_index_2.sql", "name": "calc__dim_price_index_2", "alias": "lcarr_sosx_calc__dim_price_index_2", "checksum": {"name": "sha256", "checksum": "d94dff813c8e9739029b39c644d99158937a62a02971aed02badb3510ae361ec"}, "tags": [], "refs": [["calc__dim_price_index_1"], ["stg__fct_same_store"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/price_index_calc/calc__dim_price_index_2.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false}, "created_at": 1656095234.3324301, "compiled_sql": "with add_same_store_flag as ( \n  SELECT a.dma_name,\n  a.location_num,\n  a.monthend_date,\n  a.look_back_period,\n  a.month_sales,\n  a.adjusted_sales,\n  a.month_sales_pg1,\n  a.adjusted_sales_pg1,\n  b.same_store_eligible\n  FROM \"cfa\".\"public\".\"lcarr_sosx_calc__dim_price_index_1\" a\n  inner join \"cfa\".\"public\".\"lcarr_sosx_stg__fct_same_store\" b\n  on a.location_num = b.location_num\n  and a.monthend_date = b.monthend_date \n), market_aggregation_all_stores as ( \n  select monthend_date,look_back_period,'All Stores' as same_store,\n  sum(month_sales) as market_month_sales,\n  sum(adjusted_sales) as market_adjusted_sales,\n  sum(month_sales_pg1) as market_month_sales_pg1,\n  sum(adjusted_sales_pg1) as market_adjusted_sales_pg1\n  from add_same_store_flag\n  group by 1,2\n), market_aggregation_same_stores as ( \n  select monthend_date,look_back_period,'Same Stores' as same_store,\n  sum(month_sales) as market_month_sales,\n  sum(adjusted_sales) as market_adjusted_sales,\n  sum(month_sales_pg1) as market_month_sales_pg1,\n  sum(adjusted_sales_pg1) as market_adjusted_sales_pg1\n  from add_same_store_flag\n  where same_store_eligible = 1\n  group by 1,2\n), union_all_same_store as ( \n  select monthend_date,look_back_period,same_store,\n  market_month_sales,market_adjusted_sales,\n  market_month_sales_pg1,market_adjusted_sales_pg1\n  from market_aggregation_all_stores\n  union\n  select monthend_date,look_back_period,same_store,\n  market_month_sales,market_adjusted_sales,\n  market_month_sales_pg1,market_adjusted_sales_pg1\n  from market_aggregation_same_stores\n), base_calcs as (\n  SELECT monthend_date,look_back_period,same_store,\n  market_month_sales,market_adjusted_sales,market_month_sales_pg1,market_adjusted_sales_pg1,\n  case when market_adjusted_sales_pg1 = 0.00 then 0.00 else \n  cast(market_month_sales_pg1/market_adjusted_sales_pg1 as float) end as pg1_ratio,\n  case when market_month_sales_pg1 = 0.00 then 0.00 else\n  cast(market_month_sales/market_month_sales_pg1 as float) end as actual_vs_pg1\n  from union_all_same_store\n)\nselect * from base_calcs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_calc__dim_price_index_2\""}, "model.source_of_sales_change_lcarr.calc__dim_price_index_1": {"raw_sql": "with fcs_adj_sales as ( \n    select location_num,monthend_date, \n    month_sales,adjusted_sales,month_sales_pg1,adjusted_sales_pg1\n    from {{ref('stg__dim_adj_sales')}}\n), location_attributes as ( \n    select location_num, dma_name\n    from {{ref('stg__dim_location')}}\n), fcs_adj_sales_loc as ( \n    select b.dma_name,a.location_num,a.monthend_date,'1 month' as look_back_period,\n    a.month_sales,a.adjusted_sales,a.month_sales_pg1,a.adjusted_sales_pg1\n    from fcs_adj_sales a \n    inner join location_attributes b using (location_num)\n)\nselect * from fcs_adj_sales_loc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.stg__dim_adj_sales", "model.source_of_sales_change_lcarr.stg__dim_location"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "set_up", "price_index_calc", "calc__dim_price_index_1"], "unique_id": "model.source_of_sales_change_lcarr.calc__dim_price_index_1", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "set_up/price_index_calc/calc__dim_price_index_1.sql", "original_file_path": "models/set_up/price_index_calc/calc__dim_price_index_1.sql", "name": "calc__dim_price_index_1", "alias": "lcarr_sosx_calc__dim_price_index_1", "checksum": {"name": "sha256", "checksum": "80a65a161eb69a30ae86a069f3001209e7226fa96604eed17677e6b78c5209a4"}, "tags": [], "refs": [["stg__dim_adj_sales"], ["stg__dim_location"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/set_up/price_index_calc/calc__dim_price_index_1.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false}, "created_at": 1656095234.33527, "compiled_sql": "with fcs_adj_sales as ( \n    select location_num,monthend_date, \n    month_sales,adjusted_sales,month_sales_pg1,adjusted_sales_pg1\n    from \"cfa\".\"public\".\"lcarr_sosx_stg__dim_adj_sales\"\n), location_attributes as ( \n    select location_num, dma_name\n    from \"cfa\".\"public\".\"lcarr_sosx_stg__dim_location\"\n), fcs_adj_sales_loc as ( \n    select b.dma_name,a.location_num,a.monthend_date,'1 month' as look_back_period,\n    a.month_sales,a.adjusted_sales,a.month_sales_pg1,a.adjusted_sales_pg1\n    from fcs_adj_sales a \n    inner join location_attributes b using (location_num)\n)\nselect * from fcs_adj_sales_loc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_calc__dim_price_index_1\""}, "test.source_of_sales_change_lcarr.unique_trans_detail_trans_id.bf19cf4015": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "trans_id", "model": "{{ get_where_subquery(ref('trans_detail')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.source_of_sales_change_lcarr.trans_detail"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "cfa", "schema": "public_dbt_test__audit", "fqn": ["source_of_sales_change_lcarr", "unique_trans_detail_trans_id"], "unique_id": "test.source_of_sales_change_lcarr.unique_trans_detail_trans_id.bf19cf4015", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "unique_trans_detail_trans_id.sql", "original_file_path": "models/schema.yml", "name": "unique_trans_detail_trans_id", "alias": "lcarr_sosx_unique_trans_detail_trans_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["trans_detail"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/schema.yml/unique_trans_detail_trans_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1656095234.370931, "compiled_sql": "\n    \n    \n\nselect\n    trans_id as unique_field,\n    count(*) as n_records\n\nfrom \"cfa\".\"public\".\"lcarr_sosx_trans_detail\"\nwhere trans_id is not null\ngroup by trans_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "trans_id", "file_key_name": "models.trans_detail"}, "test.source_of_sales_change_lcarr.not_null_trans_detail_trans_id.39702ad66f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "trans_id", "model": "{{ get_where_subquery(ref('trans_detail')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.source_of_sales_change_lcarr.trans_detail"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "cfa", "schema": "public_dbt_test__audit", "fqn": ["source_of_sales_change_lcarr", "not_null_trans_detail_trans_id"], "unique_id": "test.source_of_sales_change_lcarr.not_null_trans_detail_trans_id.39702ad66f", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "not_null_trans_detail_trans_id.sql", "original_file_path": "models/schema.yml", "name": "not_null_trans_detail_trans_id", "alias": "lcarr_sosx_not_null_trans_detail_trans_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["trans_detail"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/schema.yml/not_null_trans_detail_trans_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1656095234.375505, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"cfa\".\"public\".\"lcarr_sosx_trans_detail\"\nwhere trans_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "trans_id", "file_key_name": "models.trans_detail"}, "test.source_of_sales_change_lcarr.unique_item_trans_id.31db52b29b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "trans_id", "model": "{{ get_where_subquery(ref('item')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.source_of_sales_change_lcarr.item"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "cfa", "schema": "public_dbt_test__audit", "fqn": ["source_of_sales_change_lcarr", "unique_item_trans_id"], "unique_id": "test.source_of_sales_change_lcarr.unique_item_trans_id.31db52b29b", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "unique_item_trans_id.sql", "original_file_path": "models/schema.yml", "name": "unique_item_trans_id", "alias": "lcarr_sosx_unique_item_trans_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["item"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/schema.yml/unique_item_trans_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1656095234.378156, "compiled_sql": "\n    \n    \n\nselect\n    trans_id as unique_field,\n    count(*) as n_records\n\nfrom \"cfa\".\"public\".\"lcarr_sosx_item\"\nwhere trans_id is not null\ngroup by trans_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "trans_id", "file_key_name": "models.item"}, "test.source_of_sales_change_lcarr.not_null_item_trans_id.f3230ec97f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "trans_id", "model": "{{ get_where_subquery(ref('item')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.source_of_sales_change_lcarr.item"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "cfa", "schema": "public_dbt_test__audit", "fqn": ["source_of_sales_change_lcarr", "not_null_item_trans_id"], "unique_id": "test.source_of_sales_change_lcarr.not_null_item_trans_id.f3230ec97f", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "not_null_item_trans_id.sql", "original_file_path": "models/schema.yml", "name": "not_null_item_trans_id", "alias": "lcarr_sosx_not_null_item_trans_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["item"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/schema.yml/not_null_item_trans_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1656095234.380805, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"cfa\".\"public\".\"lcarr_sosx_item\"\nwhere trans_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "trans_id", "file_key_name": "models.item"}, "model.source_of_sales_change_lcarr.region_agg__distinct_calcs": {"raw_sql": "{%- set grouping_statements = [\"location_type_code,daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,'All' as destination_desc\",\n    \"location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,'All' as destination_desc\"] -%}\n\nwith distinct_calcs_all_store as (\n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from {{ref('region_agg__month_lookback_distinct')}}\n    group by 1,2,3,4,5,6,7\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n), distinct_calcs_same_store as ( \n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from {{ref('region_agg__month_lookback_distinct')}}\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n)\n\nselect * from distinct_calcs_all_store \nunion \nselect * from distinct_calcs_same_store", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "region", "aggregations_distinct", "region_agg__distinct_calcs"], "unique_id": "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "region/aggregations_distinct/region_agg__distinct_calcs.sql", "original_file_path": "models/region/aggregations_distinct/region_agg__distinct_calcs.sql", "name": "region_agg__distinct_calcs", "alias": "lcarr_sosx_region_agg__distinct_calcs", "checksum": {"name": "sha256", "checksum": "bacc25228b116bab969aa296f34c85a3df2918df2c89eb7a15bbcf900a4bfedf"}, "tags": [], "refs": [["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/region/aggregations_distinct/region_agg__distinct_calcs.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095569.0945191, "compiled_sql": "with distinct_calcs_all_store as (\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n), distinct_calcs_same_store as (\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n)\n\nselect * from distinct_calcs_all_store \nunion \nselect * from distinct_calcs_same_store", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_region_agg__distinct_calcs\""}, "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs": {"raw_sql": "{%- set grouping_statements = [\"location_type_code,daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,'All' as destination_desc\",\n    \"location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,'All' as destination_desc\"] -%}\n\nwith hash_base_calcs_all_store as (\n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from {{ref('region_agg__month_lookback_distinct')}}\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n), hash_base_calcs_same_store as ( \n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from {{ref('region_agg__month_lookback_distinct')}}\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n)\n\nselect * from hash_base_calcs_all_store \nunion \nselect * from hash_base_calcs_same_store", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "region", "aggregations_distinct", "region_agg__hash_base_calcs"], "unique_id": "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "region/aggregations_distinct/region_agg__hash_base_calcs.sql", "original_file_path": "models/region/aggregations_distinct/region_agg__hash_base_calcs.sql", "name": "region_agg__hash_base_calcs", "alias": "lcarr_sosx_region_agg__hash_base_calcs", "checksum": {"name": "sha256", "checksum": "b56a858fe0889ecab4f69d9864384d79d27b4aad1ac5404cb97cca5c24d0e73f"}, "tags": [], "refs": [["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"], ["region_agg__month_lookback_distinct"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/region/aggregations_distinct/region_agg__hash_base_calcs.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095569.114111, "compiled_sql": "with hash_base_calcs_all_store as (\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,region_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n), hash_base_calcs_same_store as (\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n)\n\nselect * from hash_base_calcs_all_store \nunion \nselect * from hash_base_calcs_same_store", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_region_agg__hash_base_calcs\""}, "model.source_of_sales_change_lcarr.region_agg__distinct_join": {"raw_sql": "with distinct_calcs_join as (\n    select a.monthend_date,a.look_back_period,a.same_store,a.region_name,\n    a.location_type_code,a.daypart,a.destination_desc,\n    a.unique_cfa_one_ids,a.unique_hashes,a.hash_transactions,\n    cast(b.cfa_one_hash_count as decimal)/b.unique_cfa_one_ids as hash_per_customer\n    from {{ref('region_agg__distinct_calcs')}} a\n    inner join {{ref('region_agg__hash_base_calcs')}} b \n    on a.monthend_date = b.monthend_date\n    and a.look_back_period = b.look_back_period\n    and a.same_store = b.same_store\n    and a.region_name = b.region_name \n    and a.location_type_code = b.location_type_code \n    and a.daypart = b.daypart\n    and a.destination_desc = b.destination_desc\n) \nselect * from distinct_calcs_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "region", "aggregations_distinct", "region_agg__distinct_join"], "unique_id": "model.source_of_sales_change_lcarr.region_agg__distinct_join", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "region/aggregations_distinct/region_agg__distinct_join.sql", "original_file_path": "models/region/aggregations_distinct/region_agg__distinct_join.sql", "name": "region_agg__distinct_join", "alias": "lcarr_sosx_region_agg__distinct_join", "checksum": {"name": "sha256", "checksum": "66a85363a873e76701a752f642914f6039f4415ba19f5cb113497062c3cf16e1"}, "tags": [], "refs": [["region_agg__distinct_calcs"], ["region_agg__hash_base_calcs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/region/aggregations_distinct/region_agg__distinct_join.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656095569.123456, "compiled_sql": "with distinct_calcs_join as (\n    select a.monthend_date,a.look_back_period,a.same_store,a.region_name,\n    a.location_type_code,a.daypart,a.destination_desc,\n    a.unique_cfa_one_ids,a.unique_hashes,a.hash_transactions,\n    cast(b.cfa_one_hash_count as decimal)/b.unique_cfa_one_ids as hash_per_customer\n    from \"cfa\".\"public\".\"lcarr_sosx_region_agg__distinct_calcs\" a\n    inner join \"cfa\".\"public\".\"lcarr_sosx_region_agg__hash_base_calcs\" b \n    on a.monthend_date = b.monthend_date\n    and a.look_back_period = b.look_back_period\n    and a.same_store = b.same_store\n    and a.region_name = b.region_name \n    and a.location_type_code = b.location_type_code \n    and a.daypart = b.daypart\n    and a.destination_desc = b.destination_desc\n) \nselect * from distinct_calcs_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_region_agg__distinct_join\""}, "model.source_of_sales_change_lcarr.region_agg__same_store_all_store": {"raw_sql": "with transaction_same_store as (\n  select a.*,b.same_store_eligible,b.actual_days,b.avail_days\n  from {{ref('region_agg__month_lookback')}} a\n  left join {{ref('stg__fct_same_store')}} b\n  on a.location_num = b.location_num\n  and a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  order by dma_name,location_num,look_back_period,location_type_code,daypart,destination_desc,monthend_date\n), transaction_agg_all_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'All Stores' as same_store,region_name,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days, \n  sum(avail_days) as avail_days\n  from transaction_same_store\n  group by 1,2,3,4,5,6,7,8\n), transaction_agg_same_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days,\n  sum(avail_days) as avail_days\n  from transaction_same_store\n  where same_store_eligible = 1 \n  group by 1,2,3,4,5,6,7,8\n), union_all_same_market_transactions as ( \n  select * from transaction_agg_all_stores\n  union\n  select * from transaction_agg_same_stores\n)\nselect * from union_all_same_market_transactions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.region_agg__month_lookback", "model.source_of_sales_change_lcarr.stg__fct_same_store"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "region", "aggregations", "region_agg__same_store_all_store"], "unique_id": "model.source_of_sales_change_lcarr.region_agg__same_store_all_store", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "region/aggregations/region_agg__same_store_all_store.sql", "original_file_path": "models/region/aggregations/region_agg__same_store_all_store.sql", "name": "region_agg__same_store_all_store", "alias": "lcarr_sosx_region_agg__same_store_all_store", "checksum": {"name": "sha256", "checksum": "d4041ff3023294251b7a3614d8a365d195b111ae865683c819726ad96e835686"}, "tags": [], "refs": [["region_agg__month_lookback"], ["stg__fct_same_store"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/region/aggregations/region_agg__same_store_all_store.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656097306.7400372, "compiled_sql": "with transaction_same_store as (\n  select a.*,b.same_store_eligible,b.actual_days,b.avail_days\n  from \"cfa\".\"public\".\"lcarr_sosx_region_agg__month_lookback\" a\n  left join \"cfa\".\"public\".\"lcarr_sosx_stg__fct_same_store\" b\n  on a.location_num = b.location_num\n  and a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  order by dma_name,location_num,look_back_period,location_type_code,daypart,destination_desc,monthend_date\n), transaction_agg_all_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'All Stores' as same_store,region_name,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days, \n  sum(avail_days) as avail_days\n  from transaction_same_store\n  group by 1,2,3,4,5,6,7,8\n), transaction_agg_same_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'Same Stores' as same_store,region_name,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days,\n  sum(avail_days) as avail_days\n  from transaction_same_store\n  where same_store_eligible = 1 \n  group by 1,2,3,4,5,6,7,8\n), union_all_same_market_transactions as ( \n  select * from transaction_agg_all_stores\n  union\n  select * from transaction_agg_same_stores\n)\nselect * from union_all_same_market_transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_region_agg__same_store_all_store\""}, "model.source_of_sales_change_lcarr.region__big_join": {"raw_sql": "with big_join as ( \n  select a.*, e.unique_cfa_one_ids, e.unique_hashes, e.hash_transactions, e.hash_per_customer,\n  b.price_index, \n  d.previous_year_monthend_date\n  from {{ref('region_agg__same_store_all_store')}} a\n  inner join {{ref('calc__dim_price_index_3')}} b\n  on a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  and a.same_store = b.same_store\n  inner join {{ref('calc__dim_monthend_date')}} d\n  on a.monthend_date = d.monthend_date\n  inner join {{ref('region_agg__distinct_join')}} e\n  on a.monthend_date = e.monthend_date\n  and a.look_back_period = e.look_back_period\n  and a.same_store = e.same_store\n  and a.region_name = e.region_name\n  and a.location_type_code = e.location_type_code\n  and a.daypart = e.daypart\n  and a.destination_desc = e.destination_desc\n)\nselect * from big_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.region_agg__same_store_all_store", "model.source_of_sales_change_lcarr.calc__dim_price_index_3", "model.source_of_sales_change_lcarr.calc__dim_monthend_date", "model.source_of_sales_change_lcarr.region_agg__distinct_join"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "region", "final_output", "region__big_join"], "unique_id": "model.source_of_sales_change_lcarr.region__big_join", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "region/final_output/region__big_join.sql", "original_file_path": "models/region/final_output/region__big_join.sql", "name": "region__big_join", "alias": "lcarr_sosx_region__big_join", "checksum": {"name": "sha256", "checksum": "3799530da68ab81bc7e7ac9410782db012c6cfbe0cc4358e8820e4c87a4a344b"}, "tags": [], "refs": [["region_agg__same_store_all_store"], ["calc__dim_price_index_3"], ["calc__dim_monthend_date"], ["region_agg__distinct_join"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/region/final_output/region__big_join.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656097915.622017, "compiled_sql": "with big_join as ( \n  select a.*, e.unique_cfa_one_ids, e.unique_hashes, e.hash_transactions, e.hash_per_customer,\n  b.price_index, \n  d.previous_year_monthend_date\n  from \"cfa\".\"public\".\"lcarr_sosx_region_agg__same_store_all_store\" a\n  inner join \"cfa\".\"public\".\"lcarr_sosx_calc__dim_price_index_3\" b\n  on a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  and a.same_store = b.same_store\n  inner join \"cfa\".\"public\".\"lcarr_sosx_calc__dim_monthend_date\" d\n  on a.monthend_date = d.monthend_date\n  inner join \"cfa\".\"public\".\"lcarr_sosx_region_agg__distinct_join\" e\n  on a.monthend_date = e.monthend_date\n  and a.look_back_period = e.look_back_period\n  and a.same_store = e.same_store\n  and a.region_name = e.region_name\n  and a.location_type_code = e.location_type_code\n  and a.daypart = e.daypart\n  and a.destination_desc = e.destination_desc\n)\nselect * from big_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_region__big_join\""}, "model.source_of_sales_change_lcarr.region__final_output": {"raw_sql": "with twentytwo as (\nselect *\nfrom {{ref('region__big_join')}} \nwhere monthend_date = cast('02-28-2022' as date) \n), twentyone as ( \nselect * \nfrom {{ref('region__big_join')}}\nwhere monthend_date = cast('02-28-2021' as date)\n) \n\nselect a.quarter,\na.look_back_period,a.same_store,\n'Region' as geolevel, \na.region_name as geolevel_detail,\na.location_type_code,a.daypart,a.destination_desc,\na.monthend_date as current_monthend_date,\na.sales_sub_total as current_sales_sub_total,\na.transactions as current_transactions,\na.purchaser_visits as current_purchaser_visits,\na.credit_txn as current_credit_txn,\na.total_items_promo_count as current_total_items_promo_count,\na.total_items_sold_count as current_total_items_sold_count,\na.actual_days as current_actual_days,\na.avail_days as current_avail_days,\na.price_index as current_price_index,\na.unique_cfa_one_ids as current_unique_cfa_one_ids,\na.unique_hashes as current_unique_hashes,\na.hash_transactions as current_hash_transactions,\na.hash_per_customer as current_hash_per_customer,\na.previous_year_monthend_date as check_date,\nb.monthend_date as previous_monthend_date,\nb.sales_sub_total as previous_sales_sub_total,\nb.transactions as previous_transactions,\nb.purchaser_visits as previous_purchaser_visits,\nb.credit_txn as previous_credit_txn,\nb.total_items_promo_count as previous_total_items_promo_count,\nb.total_items_sold_count as previous_total_items_sold_count,\nb.actual_days as previous_actual_days,\nb.avail_days as previous_avail_days,\nb.price_index as previous_price_index,\nb.unique_cfa_one_ids as previous_unique_cfa_one_ids,\nb.unique_hashes as previous_unique_hashes,\nb.hash_transactions as previous_hash_transactions,\nb.hash_per_customer as previous_hash_per_customer\nfrom twentytwo a \ninner join twentyone b\non a.look_back_period = b.look_back_period \nand a.same_store = b.same_store \nand a.region_name = b.region_name\nand a.location_type_code = b.location_type_code \nand a.daypart = b.daypart\nand a.destination_desc = b.destination_desc\nand a.previous_year_monthend_date = b.monthend_date\norder by same_store,location_type_code,daypart,destination_desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.region__big_join", "model.source_of_sales_change_lcarr.region__big_join"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "region", "final_output", "region__final_output"], "unique_id": "model.source_of_sales_change_lcarr.region__final_output", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "region/final_output/region__final_output.sql", "original_file_path": "models/region/final_output/region__final_output.sql", "name": "region__final_output", "alias": "lcarr_sosx_region__final_output", "checksum": {"name": "sha256", "checksum": "3b850ce7e808c216e6aef1eed534b2da6059d1066950f3f3ead26ce58bb6c9f7"}, "tags": [], "refs": [["region__big_join"], ["region__big_join"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/region/final_output/region__final_output.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656098056.448242, "compiled_sql": "with twentytwo as (\nselect *\nfrom \"cfa\".\"public\".\"lcarr_sosx_region__big_join\" \nwhere monthend_date = cast('02-28-2022' as date) \n), twentyone as ( \nselect * \nfrom \"cfa\".\"public\".\"lcarr_sosx_region__big_join\"\nwhere monthend_date = cast('02-28-2021' as date)\n) \n\nselect a.quarter,\na.look_back_period,a.same_store,\n'Region' as geolevel, \na.region_name as geolevel_detail,\na.location_type_code,a.daypart,a.destination_desc,\na.monthend_date as current_monthend_date,\na.sales_sub_total as current_sales_sub_total,\na.transactions as current_transactions,\na.purchaser_visits as current_purchaser_visits,\na.credit_txn as current_credit_txn,\na.total_items_promo_count as current_total_items_promo_count,\na.total_items_sold_count as current_total_items_sold_count,\na.actual_days as current_actual_days,\na.avail_days as current_avail_days,\na.price_index as current_price_index,\na.unique_cfa_one_ids as current_unique_cfa_one_ids,\na.unique_hashes as current_unique_hashes,\na.hash_transactions as current_hash_transactions,\na.hash_per_customer as current_hash_per_customer,\na.previous_year_monthend_date as check_date,\nb.monthend_date as previous_monthend_date,\nb.sales_sub_total as previous_sales_sub_total,\nb.transactions as previous_transactions,\nb.purchaser_visits as previous_purchaser_visits,\nb.credit_txn as previous_credit_txn,\nb.total_items_promo_count as previous_total_items_promo_count,\nb.total_items_sold_count as previous_total_items_sold_count,\nb.actual_days as previous_actual_days,\nb.avail_days as previous_avail_days,\nb.price_index as previous_price_index,\nb.unique_cfa_one_ids as previous_unique_cfa_one_ids,\nb.unique_hashes as previous_unique_hashes,\nb.hash_transactions as previous_hash_transactions,\nb.hash_per_customer as previous_hash_per_customer\nfrom twentytwo a \ninner join twentyone b\non a.look_back_period = b.look_back_period \nand a.same_store = b.same_store \nand a.region_name = b.region_name\nand a.location_type_code = b.location_type_code \nand a.daypart = b.daypart\nand a.destination_desc = b.destination_desc\nand a.previous_year_monthend_date = b.monthend_date\norder by same_store,location_type_code,daypart,destination_desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_region__final_output\""}, "model.source_of_sales_change_lcarr.ast__big_join": {"raw_sql": "with big_join as ( \n  select a.*, e.unique_cfa_one_ids, e.unique_hashes, e.hash_transactions, e.hash_per_customer,\n  b.price_index, \n  d.previous_year_monthend_date\n  from {{ref('ast_agg__same_store_all_store')}} a\n  inner join {{ref('calc__dim_price_index_3')}} b\n  on a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  and a.same_store = b.same_store\n  inner join {{ref('calc__dim_monthend_date')}} d\n  on a.monthend_date = d.monthend_date\n  inner join {{ref('ast_agg__distinct_join')}} e\n  on a.monthend_date = e.monthend_date\n  and a.look_back_period = e.look_back_period\n  and a.same_store = e.same_store\n  and a.service_team_name = e.service_team_name\n  and a.location_type_code = e.location_type_code\n  and a.daypart = e.daypart\n  and a.destination_desc = e.destination_desc\n)\nselect * from big_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.ast_agg__same_store_all_store", "model.source_of_sales_change_lcarr.calc__dim_price_index_3", "model.source_of_sales_change_lcarr.calc__dim_monthend_date", "model.source_of_sales_change_lcarr.ast_agg__distinct_join"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "ast", "final_output", "ast__big_join"], "unique_id": "model.source_of_sales_change_lcarr.ast__big_join", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "ast/final_output/ast__big_join.sql", "original_file_path": "models/ast/final_output/ast__big_join.sql", "name": "ast__big_join", "alias": "lcarr_sosx_ast__big_join", "checksum": {"name": "sha256", "checksum": "65db3db12b46854f227d43b60a3691f7a5d127032ea3702431207a63e5dcbbb1"}, "tags": [], "refs": [["ast_agg__same_store_all_store"], ["calc__dim_price_index_3"], ["calc__dim_monthend_date"], ["ast_agg__distinct_join"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/ast/final_output/ast__big_join.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656098533.306439, "compiled_sql": "with big_join as ( \n  select a.*, e.unique_cfa_one_ids, e.unique_hashes, e.hash_transactions, e.hash_per_customer,\n  b.price_index, \n  d.previous_year_monthend_date\n  from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__same_store_all_store\" a\n  inner join \"cfa\".\"public\".\"lcarr_sosx_calc__dim_price_index_3\" b\n  on a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  and a.same_store = b.same_store\n  inner join \"cfa\".\"public\".\"lcarr_sosx_calc__dim_monthend_date\" d\n  on a.monthend_date = d.monthend_date\n  inner join \"cfa\".\"public\".\"lcarr_sosx_ast_agg__distinct_join\" e\n  on a.monthend_date = e.monthend_date\n  and a.look_back_period = e.look_back_period\n  and a.same_store = e.same_store\n  and a.service_team_name = e.service_team_name\n  and a.location_type_code = e.location_type_code\n  and a.daypart = e.daypart\n  and a.destination_desc = e.destination_desc\n)\nselect * from big_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_ast__big_join\""}, "model.source_of_sales_change_lcarr.ast_agg__all_groupings": {"raw_sql": "{%- set grouping_statements = [\"location_type_code,daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,'All' as destination_desc\",\n    \"location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,'All' as destination_desc\"] -%}\n\nwith aggregations_all_groupings as (\n    {%- for grouping_statement in grouping_statements %}\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    {{grouping_statement}},\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from {{ref('trans_item')}}\n    group by 1,2,3,4,5,6,7,8,9\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n) \nselect * from aggregations_all_groupings", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "ast", "aggregations", "ast_agg__all_groupings"], "unique_id": "model.source_of_sales_change_lcarr.ast_agg__all_groupings", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "ast/aggregations/ast_agg__all_groupings.sql", "original_file_path": "models/ast/aggregations/ast_agg__all_groupings.sql", "name": "ast_agg__all_groupings", "alias": "lcarr_sosx_ast_agg__all_groupings", "checksum": {"name": "sha256", "checksum": "b89c92ac8b141c6df1dcdf11685a9e1e17350f8ae791dc8d6b0b4e7099e28fba"}, "tags": [], "refs": [["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/ast/aggregations/ast_agg__all_groupings.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656098533.319586, "compiled_sql": "with aggregations_all_groupings as (\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,'All' as daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n) \nselect * from aggregations_all_groupings", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_ast_agg__all_groupings\""}, "model.source_of_sales_change_lcarr.ast_agg__same_store_all_store": {"raw_sql": "with transaction_same_store as (\n  select a.*,b.same_store_eligible,b.actual_days,b.avail_days\n  from {{ref('ast_agg__month_lookback')}} a\n  left join {{ref('stg__fct_same_store')}} b\n  on a.location_num = b.location_num\n  and a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  order by dma_name,location_num,look_back_period,location_type_code,daypart,destination_desc,monthend_date\n), transaction_agg_all_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days, \n  sum(avail_days) as avail_days\n  from transaction_same_store\n  group by 1,2,3,4,5,6,7,8\n), transaction_agg_same_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days,\n  sum(avail_days) as avail_days\n  from transaction_same_store\n  where same_store_eligible = 1 \n  group by 1,2,3,4,5,6,7,8\n), union_all_same_market_transactions as ( \n  select * from transaction_agg_all_stores\n  union\n  select * from transaction_agg_same_stores\n)\nselect * from union_all_same_market_transactions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.ast_agg__month_lookback", "model.source_of_sales_change_lcarr.stg__fct_same_store"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "ast", "aggregations", "ast_agg__same_store_all_store"], "unique_id": "model.source_of_sales_change_lcarr.ast_agg__same_store_all_store", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "ast/aggregations/ast_agg__same_store_all_store.sql", "original_file_path": "models/ast/aggregations/ast_agg__same_store_all_store.sql", "name": "ast_agg__same_store_all_store", "alias": "lcarr_sosx_ast_agg__same_store_all_store", "checksum": {"name": "sha256", "checksum": "dc382052a2e1e3e155a9b9d6a942f71c2de09a85c18f7ec93ed16e893a81c2d0"}, "tags": [], "refs": [["ast_agg__month_lookback"], ["stg__fct_same_store"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/ast/aggregations/ast_agg__same_store_all_store.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656098533.329704, "compiled_sql": "with transaction_same_store as (\n  select a.*,b.same_store_eligible,b.actual_days,b.avail_days\n  from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback\" a\n  left join \"cfa\".\"public\".\"lcarr_sosx_stg__fct_same_store\" b\n  on a.location_num = b.location_num\n  and a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  order by dma_name,location_num,look_back_period,location_type_code,daypart,destination_desc,monthend_date\n), transaction_agg_all_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days, \n  sum(avail_days) as avail_days\n  from transaction_same_store\n  group by 1,2,3,4,5,6,7,8\n), transaction_agg_same_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days,\n  sum(avail_days) as avail_days\n  from transaction_same_store\n  where same_store_eligible = 1 \n  group by 1,2,3,4,5,6,7,8\n), union_all_same_market_transactions as ( \n  select * from transaction_agg_all_stores\n  union\n  select * from transaction_agg_same_stores\n)\nselect * from union_all_same_market_transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_ast_agg__same_store_all_store\""}, "model.source_of_sales_change_lcarr.ast__final_output": {"raw_sql": "with twentytwo as (\nselect *\nfrom {{ref('ast__big_join')}} \nwhere monthend_date = cast('02-28-2022' as date) \n), twentyone as ( \nselect * \nfrom {{ref('ast__big_join')}}\nwhere monthend_date = cast('02-28-2021' as date)\n) \n\nselect a.quarter,\na.look_back_period,a.same_store,\n'AST' as geolevel, \na.service_team_name as geolevel_detail,\na.location_type_code,a.daypart,a.destination_desc,\na.monthend_date as current_monthend_date,\na.sales_sub_total as current_sales_sub_total,\na.transactions as current_transactions,\na.purchaser_visits as current_purchaser_visits,\na.credit_txn as current_credit_txn,\na.total_items_promo_count as current_total_items_promo_count,\na.total_items_sold_count as current_total_items_sold_count,\na.actual_days as current_actual_days,\na.avail_days as current_avail_days,\na.price_index as current_price_index,\na.unique_cfa_one_ids as current_unique_cfa_one_ids,\na.unique_hashes as current_unique_hashes,\na.hash_transactions as current_hash_transactions,\na.hash_per_customer as current_hash_per_customer,\na.previous_year_monthend_date as check_date,\nb.monthend_date as previous_monthend_date,\nb.sales_sub_total as previous_sales_sub_total,\nb.transactions as previous_transactions,\nb.purchaser_visits as previous_purchaser_visits,\nb.credit_txn as previous_credit_txn,\nb.total_items_promo_count as previous_total_items_promo_count,\nb.total_items_sold_count as previous_total_items_sold_count,\nb.actual_days as previous_actual_days,\nb.avail_days as previous_avail_days,\nb.price_index as previous_price_index,\nb.unique_cfa_one_ids as previous_unique_cfa_one_ids,\nb.unique_hashes as previous_unique_hashes,\nb.hash_transactions as previous_hash_transactions,\nb.hash_per_customer as previous_hash_per_customer\nfrom twentytwo a \ninner join twentyone b\non a.look_back_period = b.look_back_period \nand a.same_store = b.same_store \nand a.service_team_name = b.service_team_name\nand a.location_type_code = b.location_type_code \nand a.daypart = b.daypart\nand a.destination_desc = b.destination_desc\nand a.previous_year_monthend_date = b.monthend_date\norder by same_store,location_type_code,daypart,destination_desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.ast__big_join", "model.source_of_sales_change_lcarr.ast__big_join"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "ast", "final_output", "ast__final_output"], "unique_id": "model.source_of_sales_change_lcarr.ast__final_output", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "ast/final_output/ast__final_output.sql", "original_file_path": "models/ast/final_output/ast__final_output.sql", "name": "ast__final_output", "alias": "lcarr_sosx_ast__final_output", "checksum": {"name": "sha256", "checksum": "567ed37017892f6a8f0577b2355c909fbeba2b46a9acc49bc24e163fe189c0d5"}, "tags": [], "refs": [["ast__big_join"], ["ast__big_join"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/ast/final_output/ast__final_output.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656098533.332319, "compiled_sql": "with twentytwo as (\nselect *\nfrom \"cfa\".\"public\".\"lcarr_sosx_ast__big_join\" \nwhere monthend_date = cast('02-28-2022' as date) \n), twentyone as ( \nselect * \nfrom \"cfa\".\"public\".\"lcarr_sosx_ast__big_join\"\nwhere monthend_date = cast('02-28-2021' as date)\n) \n\nselect a.quarter,\na.look_back_period,a.same_store,\n'AST' as geolevel, \na.service_team_name as geolevel_detail,\na.location_type_code,a.daypart,a.destination_desc,\na.monthend_date as current_monthend_date,\na.sales_sub_total as current_sales_sub_total,\na.transactions as current_transactions,\na.purchaser_visits as current_purchaser_visits,\na.credit_txn as current_credit_txn,\na.total_items_promo_count as current_total_items_promo_count,\na.total_items_sold_count as current_total_items_sold_count,\na.actual_days as current_actual_days,\na.avail_days as current_avail_days,\na.price_index as current_price_index,\na.unique_cfa_one_ids as current_unique_cfa_one_ids,\na.unique_hashes as current_unique_hashes,\na.hash_transactions as current_hash_transactions,\na.hash_per_customer as current_hash_per_customer,\na.previous_year_monthend_date as check_date,\nb.monthend_date as previous_monthend_date,\nb.sales_sub_total as previous_sales_sub_total,\nb.transactions as previous_transactions,\nb.purchaser_visits as previous_purchaser_visits,\nb.credit_txn as previous_credit_txn,\nb.total_items_promo_count as previous_total_items_promo_count,\nb.total_items_sold_count as previous_total_items_sold_count,\nb.actual_days as previous_actual_days,\nb.avail_days as previous_avail_days,\nb.price_index as previous_price_index,\nb.unique_cfa_one_ids as previous_unique_cfa_one_ids,\nb.unique_hashes as previous_unique_hashes,\nb.hash_transactions as previous_hash_transactions,\nb.hash_per_customer as previous_hash_per_customer\nfrom twentytwo a \ninner join twentyone b\non a.look_back_period = b.look_back_period \nand a.same_store = b.same_store \nand a.service_team_name = b.service_team_name\nand a.location_type_code = b.location_type_code \nand a.daypart = b.daypart\nand a.destination_desc = b.destination_desc\nand a.previous_year_monthend_date = b.monthend_date\norder by same_store,location_type_code,daypart,destination_desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_ast__final_output\""}, "model.source_of_sales_change_lcarr.ast_agg__month_lookback": {"raw_sql": "with add_month_lookback as (\n  select quarter,region_name,service_team_name,dma_name,location_num,\n  monthend_date,'1 month' as look_back_period,\n  location_type_code,daypart,destination_desc,sales_sub_total,\n  transactions,purchaser_visits,credit_txn,\n  total_items_promo_count,total_items_sold_count\n  from {{ref('ast_agg__all_groupings')}}\n)\nselect * from add_month_lookback", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.ast_agg__all_groupings"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "ast", "aggregations", "ast_agg__month_lookback"], "unique_id": "model.source_of_sales_change_lcarr.ast_agg__month_lookback", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "ast/aggregations/ast_agg__month_lookback.sql", "original_file_path": "models/ast/aggregations/ast_agg__month_lookback.sql", "name": "ast_agg__month_lookback", "alias": "lcarr_sosx_ast_agg__month_lookback", "checksum": {"name": "sha256", "checksum": "03b4289d110a89de3fb1cba548bb89c96028e13877234b75f18d9c670f700d95"}, "tags": [], "refs": [["ast_agg__all_groupings"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/ast/aggregations/ast_agg__month_lookback.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656098533.335113, "compiled_sql": "with add_month_lookback as (\n  select quarter,region_name,service_team_name,dma_name,location_num,\n  monthend_date,'1 month' as look_back_period,\n  location_type_code,daypart,destination_desc,sales_sub_total,\n  transactions,purchaser_visits,credit_txn,\n  total_items_promo_count,total_items_sold_count\n  from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__all_groupings\"\n)\nselect * from add_month_lookback", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback\""}, "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct": {"raw_sql": "with one_month_set_up as (\n  select a.region_name,a.service_team_name,a.dma_name,\n  a.location_num,a.monthend_date,'1 month' as look_back_period,\n  a.trans_id,a.cfa_one_id,a.customer_hash,\n  a.location_type_code,a.daypart,a.destination_desc,\n  b.same_store_eligible\n  from {{ref('trans_item')}} a\n  inner join {{ref('stg__fct_same_store')}} b\n  on a.location_num = b.location_num\n  and a.monthend_date = b.monthend_date \n  and b.look_back_period = '1 month'\n)\nselect * from one_month_set_up", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.stg__fct_same_store"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "ast", "aggregations_distinct", "ast_agg__month_lookback_distinct"], "unique_id": "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "ast/aggregations_distinct/ast_agg__month_lookback_distinct.sql", "original_file_path": "models/ast/aggregations_distinct/ast_agg__month_lookback_distinct.sql", "name": "ast_agg__month_lookback_distinct", "alias": "lcarr_sosx_ast_agg__month_lookback_distinct", "checksum": {"name": "sha256", "checksum": "8938ce276eb15cc9581551a2f2be8d9960b53bd9f8a6a83945751efcceca86fc"}, "tags": [], "refs": [["trans_item"], ["stg__fct_same_store"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/ast/aggregations_distinct/ast_agg__month_lookback_distinct.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656098533.337719, "compiled_sql": "with one_month_set_up as (\n  select a.region_name,a.service_team_name,a.dma_name,\n  a.location_num,a.monthend_date,'1 month' as look_back_period,\n  a.trans_id,a.cfa_one_id,a.customer_hash,\n  a.location_type_code,a.daypart,a.destination_desc,\n  b.same_store_eligible\n  from \"cfa\".\"public\".\"lcarr_sosx_trans_item\" a\n  inner join \"cfa\".\"public\".\"lcarr_sosx_stg__fct_same_store\" b\n  on a.location_num = b.location_num\n  and a.monthend_date = b.monthend_date \n  and b.look_back_period = '1 month'\n)\nselect * from one_month_set_up", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\""}, "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs": {"raw_sql": "{%- set grouping_statements = [\"location_type_code,daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,'All' as destination_desc\",\n    \"location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,'All' as destination_desc\"] -%}\n\nwith distinct_calcs_all_store as (\n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from {{ref('ast_agg__month_lookback_distinct')}}\n    group by 1,2,3,4,5,6,7\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n), distinct_calcs_same_store as ( \n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from {{ref('ast_agg__month_lookback_distinct')}}\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n)\n\nselect * from distinct_calcs_all_store \nunion \nselect * from distinct_calcs_same_store", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "ast", "aggregations_distinct", "ast_agg__distinct_calcs"], "unique_id": "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "ast/aggregations_distinct/ast_agg__distinct_calcs.sql", "original_file_path": "models/ast/aggregations_distinct/ast_agg__distinct_calcs.sql", "name": "ast_agg__distinct_calcs", "alias": "lcarr_sosx_ast_agg__distinct_calcs", "checksum": {"name": "sha256", "checksum": "407b0bf1e91bf9846314dd75085072acb1550d0044c578035f898fc1049aed47"}, "tags": [], "refs": [["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/ast/aggregations_distinct/ast_agg__distinct_calcs.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656098533.340586, "compiled_sql": "with distinct_calcs_all_store as (\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n), distinct_calcs_same_store as (\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n)\n\nselect * from distinct_calcs_all_store \nunion \nselect * from distinct_calcs_same_store", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_ast_agg__distinct_calcs\""}, "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs": {"raw_sql": "{%- set grouping_statements = [\"location_type_code,daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,'All' as destination_desc\",\n    \"location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,'All' as destination_desc\"] -%}\n\nwith hash_base_calcs_all_store as (\n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from {{ref('ast_agg__month_lookback_distinct')}}\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n), hash_base_calcs_same_store as ( \n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from {{ref('ast_agg__month_lookback_distinct')}}\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n)\n\nselect * from hash_base_calcs_all_store \nunion \nselect * from hash_base_calcs_same_store", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "ast", "aggregations_distinct", "ast_agg__hash_base_calcs"], "unique_id": "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "ast/aggregations_distinct/ast_agg__hash_base_calcs.sql", "original_file_path": "models/ast/aggregations_distinct/ast_agg__hash_base_calcs.sql", "name": "ast_agg__hash_base_calcs", "alias": "lcarr_sosx_ast_agg__hash_base_calcs", "checksum": {"name": "sha256", "checksum": "137954548c3d3163638af18ea787a9345fc93d2e256e351f82e358c43caf2331"}, "tags": [], "refs": [["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/ast/aggregations_distinct/ast_agg__hash_base_calcs.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656098533.349938, "compiled_sql": "with hash_base_calcs_all_store as (\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,service_team_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n), hash_base_calcs_same_store as (\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,service_team_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n)\n\nselect * from hash_base_calcs_all_store \nunion \nselect * from hash_base_calcs_same_store", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_ast_agg__hash_base_calcs\""}, "model.source_of_sales_change_lcarr.ast_agg__distinct_join": {"raw_sql": "with distinct_calcs_join as (\n    select a.monthend_date,a.look_back_period,a.same_store,a.service_team_name,\n    a.location_type_code,a.daypart,a.destination_desc,\n    a.unique_cfa_one_ids,a.unique_hashes,a.hash_transactions,\n    cast(b.cfa_one_hash_count as decimal)/b.unique_cfa_one_ids as hash_per_customer\n    from {{ref('ast_agg__distinct_calcs')}} a\n    inner join {{ref('ast_agg__hash_base_calcs')}} b \n    on a.monthend_date = b.monthend_date\n    and a.look_back_period = b.look_back_period\n    and a.same_store = b.same_store\n    and a.service_team_name = b.service_team_name \n    and a.location_type_code = b.location_type_code \n    and a.daypart = b.daypart\n    and a.destination_desc = b.destination_desc\n) \nselect * from distinct_calcs_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "ast", "aggregations_distinct", "ast_agg__distinct_join"], "unique_id": "model.source_of_sales_change_lcarr.ast_agg__distinct_join", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "ast/aggregations_distinct/ast_agg__distinct_join.sql", "original_file_path": "models/ast/aggregations_distinct/ast_agg__distinct_join.sql", "name": "ast_agg__distinct_join", "alias": "lcarr_sosx_ast_agg__distinct_join", "checksum": {"name": "sha256", "checksum": "b75c23ad8ef41e2f4b3c2a03874829df3f9a7b9fd948a2917c92346348a8986b"}, "tags": [], "refs": [["ast_agg__distinct_calcs"], ["ast_agg__hash_base_calcs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/ast/aggregations_distinct/ast_agg__distinct_join.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656098533.364554, "compiled_sql": "with distinct_calcs_join as (\n    select a.monthend_date,a.look_back_period,a.same_store,a.service_team_name,\n    a.location_type_code,a.daypart,a.destination_desc,\n    a.unique_cfa_one_ids,a.unique_hashes,a.hash_transactions,\n    cast(b.cfa_one_hash_count as decimal)/b.unique_cfa_one_ids as hash_per_customer\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__distinct_calcs\" a\n    inner join \"cfa\".\"public\".\"lcarr_sosx_ast_agg__hash_base_calcs\" b \n    on a.monthend_date = b.monthend_date\n    and a.look_back_period = b.look_back_period\n    and a.same_store = b.same_store\n    and a.service_team_name = b.service_team_name \n    and a.location_type_code = b.location_type_code \n    and a.daypart = b.daypart\n    and a.destination_desc = b.destination_desc\n) \nselect * from distinct_calcs_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_ast_agg__distinct_join\""}, "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct": {"raw_sql": "with one_month_set_up as (\n  select a.region_name,a.service_team_name,a.dma_name,\n  a.location_num,a.monthend_date,'1 month' as look_back_period,\n  a.trans_id,a.cfa_one_id,a.customer_hash,\n  a.location_type_code,a.daypart,a.destination_desc,\n  b.same_store_eligible\n  from {{ref('trans_item')}} a\n  inner join {{ref('stg__fct_same_store')}} b\n  on a.location_num = b.location_num\n  and a.monthend_date = b.monthend_date \n  and b.look_back_period = '1 month'\n)\nselect * from one_month_set_up", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.stg__fct_same_store"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "market", "aggregations_distinct", "market_agg__month_lookback_distinct"], "unique_id": "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "market/aggregations_distinct/market_agg__month_lookback_distinct.sql", "original_file_path": "models/market/aggregations_distinct/market_agg__month_lookback_distinct.sql", "name": "market_agg__month_lookback_distinct", "alias": "lcarr_sosx_market_agg__month_lookback_distinct", "checksum": {"name": "sha256", "checksum": "8938ce276eb15cc9581551a2f2be8d9960b53bd9f8a6a83945751efcceca86fc"}, "tags": [], "refs": [["trans_item"], ["stg__fct_same_store"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/market/aggregations_distinct/market_agg__month_lookback_distinct.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656099736.174159, "compiled_sql": "with one_month_set_up as (\n  select a.region_name,a.service_team_name,a.dma_name,\n  a.location_num,a.monthend_date,'1 month' as look_back_period,\n  a.trans_id,a.cfa_one_id,a.customer_hash,\n  a.location_type_code,a.daypart,a.destination_desc,\n  b.same_store_eligible\n  from \"cfa\".\"public\".\"lcarr_sosx_trans_item\" a\n  inner join \"cfa\".\"public\".\"lcarr_sosx_stg__fct_same_store\" b\n  on a.location_num = b.location_num\n  and a.monthend_date = b.monthend_date \n  and b.look_back_period = '1 month'\n)\nselect * from one_month_set_up", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\""}, "model.source_of_sales_change_lcarr.market__big_join": {"raw_sql": "with big_join as ( \n  select a.*, e.unique_cfa_one_ids, e.unique_hashes, e.hash_transactions, e.hash_per_customer,\n  b.price_index, \n  d.previous_year_monthend_date\n  from {{ref('market_agg__same_store_all_store')}} a\n  inner join {{ref('calc__dim_price_index_3')}} b\n  on a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  and a.same_store = b.same_store\n  inner join {{ref('calc__dim_monthend_date')}} d\n  on a.monthend_date = d.monthend_date\n  inner join {{ref('market_agg__distinct_join')}} e\n  on a.monthend_date = e.monthend_date\n  and a.look_back_period = e.look_back_period\n  and a.same_store = e.same_store\n  and a.dma_name = e.dma_name\n  and a.location_type_code = e.location_type_code\n  and a.daypart = e.daypart\n  and a.destination_desc = e.destination_desc\n)\nselect * from big_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.market_agg__same_store_all_store", "model.source_of_sales_change_lcarr.calc__dim_price_index_3", "model.source_of_sales_change_lcarr.calc__dim_monthend_date", "model.source_of_sales_change_lcarr.market_agg__distinct_join"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "market", "final_output", "market__big_join"], "unique_id": "model.source_of_sales_change_lcarr.market__big_join", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "market/final_output/market__big_join.sql", "original_file_path": "models/market/final_output/market__big_join.sql", "name": "market__big_join", "alias": "lcarr_sosx_market__big_join", "checksum": {"name": "sha256", "checksum": "073f338d382f5dfc3f6e83d46f5d706573163683d766990f9421385b05cb11cd"}, "tags": [], "refs": [["market_agg__same_store_all_store"], ["calc__dim_price_index_3"], ["calc__dim_monthend_date"], ["market_agg__distinct_join"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/market/final_output/market__big_join.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656099736.204544, "compiled_sql": "with big_join as ( \n  select a.*, e.unique_cfa_one_ids, e.unique_hashes, e.hash_transactions, e.hash_per_customer,\n  b.price_index, \n  d.previous_year_monthend_date\n  from \"cfa\".\"public\".\"lcarr_sosx_market_agg__same_store_all_store\" a\n  inner join \"cfa\".\"public\".\"lcarr_sosx_calc__dim_price_index_3\" b\n  on a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  and a.same_store = b.same_store\n  inner join \"cfa\".\"public\".\"lcarr_sosx_calc__dim_monthend_date\" d\n  on a.monthend_date = d.monthend_date\n  inner join \"cfa\".\"public\".\"lcarr_sosx_market_agg__distinct_join\" e\n  on a.monthend_date = e.monthend_date\n  and a.look_back_period = e.look_back_period\n  and a.same_store = e.same_store\n  and a.dma_name = e.dma_name\n  and a.location_type_code = e.location_type_code\n  and a.daypart = e.daypart\n  and a.destination_desc = e.destination_desc\n)\nselect * from big_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_market__big_join\""}, "model.source_of_sales_change_lcarr.market_agg__distinct_join": {"raw_sql": "with distinct_calcs_join as (\n    select a.monthend_date,a.look_back_period,a.same_store,a.dma_name,\n    a.location_type_code,a.daypart,a.destination_desc,\n    a.unique_cfa_one_ids,a.unique_hashes,a.hash_transactions,\n    cast(b.cfa_one_hash_count as decimal)/b.unique_cfa_one_ids as hash_per_customer\n    from {{ref('market_agg__distinct_calcs')}} a\n    inner join {{ref('market_agg__hash_base_calcs')}} b \n    on a.monthend_date = b.monthend_date\n    and a.look_back_period = b.look_back_period\n    and a.same_store = b.same_store\n    and a.dma_name = b.dma_name \n    and a.location_type_code = b.location_type_code \n    and a.daypart = b.daypart\n    and a.destination_desc = b.destination_desc\n) \nselect * from distinct_calcs_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "market", "aggregations_distinct", "market_agg__distinct_join"], "unique_id": "model.source_of_sales_change_lcarr.market_agg__distinct_join", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "market/aggregations_distinct/market_agg__distinct_join.sql", "original_file_path": "models/market/aggregations_distinct/market_agg__distinct_join.sql", "name": "market_agg__distinct_join", "alias": "lcarr_sosx_market_agg__distinct_join", "checksum": {"name": "sha256", "checksum": "fd81f488009503a3a1667d6c39261d8f56ad5d08afe97c281c87f44273dce819"}, "tags": [], "refs": [["market_agg__distinct_calcs"], ["market_agg__hash_base_calcs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/market/aggregations_distinct/market_agg__distinct_join.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656099736.209318, "compiled_sql": "with distinct_calcs_join as (\n    select a.monthend_date,a.look_back_period,a.same_store,a.dma_name,\n    a.location_type_code,a.daypart,a.destination_desc,\n    a.unique_cfa_one_ids,a.unique_hashes,a.hash_transactions,\n    cast(b.cfa_one_hash_count as decimal)/b.unique_cfa_one_ids as hash_per_customer\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__distinct_calcs\" a\n    inner join \"cfa\".\"public\".\"lcarr_sosx_market_agg__hash_base_calcs\" b \n    on a.monthend_date = b.monthend_date\n    and a.look_back_period = b.look_back_period\n    and a.same_store = b.same_store\n    and a.dma_name = b.dma_name \n    and a.location_type_code = b.location_type_code \n    and a.daypart = b.daypart\n    and a.destination_desc = b.destination_desc\n) \nselect * from distinct_calcs_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_market_agg__distinct_join\""}, "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs": {"raw_sql": "{%- set grouping_statements = [\"location_type_code,daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,'All' as destination_desc\",\n    \"location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,'All' as destination_desc\"] -%}\n\nwith hash_base_calcs_all_store as (\n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from {{ref('market_agg__month_lookback_distinct')}}\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n), hash_base_calcs_same_store as ( \n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from {{ref('market_agg__month_lookback_distinct')}}\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n)\n\nselect * from hash_base_calcs_all_store \nunion \nselect * from hash_base_calcs_same_store", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "market", "aggregations_distinct", "market_agg__hash_base_calcs"], "unique_id": "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "market/aggregations_distinct/market_agg__hash_base_calcs.sql", "original_file_path": "models/market/aggregations_distinct/market_agg__hash_base_calcs.sql", "name": "market_agg__hash_base_calcs", "alias": "lcarr_sosx_market_agg__hash_base_calcs", "checksum": {"name": "sha256", "checksum": "3df5d20648dedf3be8b467f23b378c07add1eb674b2686460bef1f04281f8bdc"}, "tags": [], "refs": [["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/market/aggregations_distinct/market_agg__hash_base_calcs.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656099736.214411, "compiled_sql": "with hash_base_calcs_all_store as (\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    group by 1,2,3,4,5,6,7\n), hash_base_calcs_same_store as (\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as cfa_one_hash_count\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where cfa_one_id is not null \n    and cfa_one_id <> ''\n    and cfa_one_id <> ' '\n    and customer_hash is not null\n    and customer_hash <> ''\n    and customer_hash <> ' '\n    and same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n)\n\nselect * from hash_base_calcs_all_store \nunion \nselect * from hash_base_calcs_same_store", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_market_agg__hash_base_calcs\""}, "model.source_of_sales_change_lcarr.market_agg__month_lookback": {"raw_sql": "with add_month_lookback as (\n  select quarter,region_name,service_team_name,dma_name,location_num,\n  monthend_date,'1 month' as look_back_period,\n  location_type_code,daypart,destination_desc,sales_sub_total,\n  transactions,purchaser_visits,credit_txn,\n  total_items_promo_count,total_items_sold_count\n  from {{ref('market_agg__all_groupings')}}\n)\nselect * from add_month_lookback", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.market_agg__all_groupings"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "market", "aggregations", "market_agg__month_lookback"], "unique_id": "model.source_of_sales_change_lcarr.market_agg__month_lookback", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "market/aggregations/market_agg__month_lookback.sql", "original_file_path": "models/market/aggregations/market_agg__month_lookback.sql", "name": "market_agg__month_lookback", "alias": "lcarr_sosx_market_agg__month_lookback", "checksum": {"name": "sha256", "checksum": "c8c056779b8479ed3e1a84c422ba37c1e5562b379d21567f6e3384b44ac60edc"}, "tags": [], "refs": [["market_agg__all_groupings"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/market/aggregations/market_agg__month_lookback.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656099736.229774, "compiled_sql": "with add_month_lookback as (\n  select quarter,region_name,service_team_name,dma_name,location_num,\n  monthend_date,'1 month' as look_back_period,\n  location_type_code,daypart,destination_desc,sales_sub_total,\n  transactions,purchaser_visits,credit_txn,\n  total_items_promo_count,total_items_sold_count\n  from \"cfa\".\"public\".\"lcarr_sosx_market_agg__all_groupings\"\n)\nselect * from add_month_lookback", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback\""}, "model.source_of_sales_change_lcarr.market_agg__all_groupings": {"raw_sql": "{%- set grouping_statements = [\"location_type_code,daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,'All' as destination_desc\",\n    \"location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,'All' as destination_desc\"] -%}\n\nwith aggregations_all_groupings as (\n    {%- for grouping_statement in grouping_statements %}\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    {{grouping_statement}},\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from {{ref('trans_item')}}\n    group by 1,2,3,4,5,6,7,8,9\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n) \nselect * from aggregations_all_groupings", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "market", "aggregations", "market_agg__all_groupings"], "unique_id": "model.source_of_sales_change_lcarr.market_agg__all_groupings", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "market/aggregations/market_agg__all_groupings.sql", "original_file_path": "models/market/aggregations/market_agg__all_groupings.sql", "name": "market_agg__all_groupings", "alias": "lcarr_sosx_market_agg__all_groupings", "checksum": {"name": "sha256", "checksum": "b89c92ac8b141c6df1dcdf11685a9e1e17350f8ae791dc8d6b0b4e7099e28fba"}, "tags": [], "refs": [["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"], ["trans_item"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/market/aggregations/market_agg__all_groupings.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656099736.2341042, "compiled_sql": "with aggregations_all_groupings as (\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,'All' as daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    location_type_code,daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n    union\n    select quarter,monthend_date,\n    location_num,dma_name,region_name,service_team_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    sum(sales_sub_total) as sales_sub_total,\n    count(distinct trans_id) as transactions,\n    sum(visit_count) as purchaser_visits,\n    sum(credit_flag) as credit_txn,\n    sum(total_items_promo_count) as total_items_promo_count,\n    sum(total_items_sold_count) as total_items_sold_count\n    from \"cfa\".\"public\".\"lcarr_sosx_trans_item\"\n    group by 1,2,3,4,5,6,7,8,9\n) \nselect * from aggregations_all_groupings", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_market_agg__all_groupings\""}, "model.source_of_sales_change_lcarr.market_agg__same_store_all_store": {"raw_sql": "with transaction_same_store as (\n  select a.*,b.same_store_eligible,b.actual_days,b.avail_days\n  from {{ref('market_agg__month_lookback')}} a\n  left join {{ref('stg__fct_same_store')}} b\n  on a.location_num = b.location_num\n  and a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  order by dma_name,location_num,look_back_period,location_type_code,daypart,destination_desc,monthend_date\n), transaction_agg_all_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days, \n  sum(avail_days) as avail_days\n  from transaction_same_store\n  group by 1,2,3,4,5,6,7,8\n), transaction_agg_same_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days,\n  sum(avail_days) as avail_days\n  from transaction_same_store\n  where same_store_eligible = 1 \n  group by 1,2,3,4,5,6,7,8\n), union_all_same_market_transactions as ( \n  select * from transaction_agg_all_stores\n  union\n  select * from transaction_agg_same_stores\n)\nselect * from union_all_same_market_transactions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.market_agg__month_lookback", "model.source_of_sales_change_lcarr.stg__fct_same_store"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "market", "aggregations", "market_agg__same_store_all_store"], "unique_id": "model.source_of_sales_change_lcarr.market_agg__same_store_all_store", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "market/aggregations/market_agg__same_store_all_store.sql", "original_file_path": "models/market/aggregations/market_agg__same_store_all_store.sql", "name": "market_agg__same_store_all_store", "alias": "lcarr_sosx_market_agg__same_store_all_store", "checksum": {"name": "sha256", "checksum": "6e88e04860c50935962e0683115f0065b65a86ccd818633ef15808c36c6fa22f"}, "tags": [], "refs": [["market_agg__month_lookback"], ["stg__fct_same_store"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/market/aggregations/market_agg__same_store_all_store.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656099863.5552378, "compiled_sql": "with transaction_same_store as (\n  select a.*,b.same_store_eligible,b.actual_days,b.avail_days\n  from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback\" a\n  left join \"cfa\".\"public\".\"lcarr_sosx_stg__fct_same_store\" b\n  on a.location_num = b.location_num\n  and a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  order by dma_name,location_num,look_back_period,location_type_code,daypart,destination_desc,monthend_date\n), transaction_agg_all_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days, \n  sum(avail_days) as avail_days\n  from transaction_same_store\n  group by 1,2,3,4,5,6,7,8\n), transaction_agg_same_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days,\n  sum(avail_days) as avail_days\n  from transaction_same_store\n  where same_store_eligible = 1 \n  group by 1,2,3,4,5,6,7,8\n), union_all_same_market_transactions as ( \n  select * from transaction_agg_all_stores\n  union\n  select * from transaction_agg_same_stores\n)\nselect * from union_all_same_market_transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_market_agg__same_store_all_store\""}, "model.source_of_sales_change_lcarr.market_agg__distinct_calcs": {"raw_sql": "{%- set grouping_statements = [\"location_type_code,daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,destination_desc\",\n    \"location_type_code,'All' as daypart,'All' as destination_desc\",\n    \"location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,'All' as destination_desc\",\n    \"'All' as location_type_code,daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,destination_desc\",\n    \"'All' as location_type_code,'All' as daypart,'All' as destination_desc\"] -%}\n\nwith distinct_calcs_all_store as (\n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from {{ref('ast_agg__month_lookback_distinct')}}\n    group by 1,2,3,4,5,6,7\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n), distinct_calcs_same_store as ( \n    {%- for grouping_statement in grouping_statements %}\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    {{grouping_statement}},\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from {{ref('market_agg__month_lookback_distinct')}}\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    {%- if not loop.last %}\n    union{% endif -%}\n    {% endfor %}\n)\n\nselect * from distinct_calcs_all_store \nunion \nselect * from distinct_calcs_same_store", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "market", "aggregations_distinct", "market_agg__distinct_calcs"], "unique_id": "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "market/aggregations_distinct/market_agg__distinct_calcs.sql", "original_file_path": "models/market/aggregations_distinct/market_agg__distinct_calcs.sql", "name": "market_agg__distinct_calcs", "alias": "lcarr_sosx_market_agg__distinct_calcs", "checksum": {"name": "sha256", "checksum": "c5818249bb14fd6690f2fd84677cbdbc84010521f26eb8065a23a69f522cbd79"}, "tags": [], "refs": [["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["ast_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"], ["market_agg__month_lookback_distinct"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/market/aggregations_distinct/market_agg__distinct_calcs.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656100761.6398451, "compiled_sql": "with distinct_calcs_all_store as (\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'All Stores' as same_store,dma_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_ast_agg__month_lookback_distinct\"\n    group by 1,2,3,4,5,6,7\n), distinct_calcs_same_store as (\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    'All' as location_type_code,daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    'All' as location_type_code,daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    'All' as location_type_code,'All' as daypart,destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n    union\n    select monthend_date,look_back_period,'Same Stores' as same_store,dma_name,\n    'All' as location_type_code,'All' as daypart,'All' as destination_desc,\n    count(distinct cfa_one_id) as unique_cfa_one_ids, \n    count(distinct customer_hash) as unique_hashes,\n    count(customer_hash) as hash_transactions\n    from \"cfa\".\"public\".\"lcarr_sosx_market_agg__month_lookback_distinct\"\n    where same_store_eligible = 1\n    group by 1,2,3,4,5,6,7\n)\n\nselect * from distinct_calcs_all_store \nunion \nselect * from distinct_calcs_same_store", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_market_agg__distinct_calcs\""}, "model.source_of_sales_change_lcarr.market__final_output": {"raw_sql": "with twentytwo as (\nselect *\nfrom {{ref('market__big_join')}} \nwhere monthend_date = cast('02-28-2022' as date) \n), twentyone as ( \nselect * \nfrom {{ref('market__big_join')}}\nwhere monthend_date = cast('02-28-2021' as date)\n) \n\nselect a.quarter,\na.look_back_period,a.same_store,\n'Market' as geolevel, \na.dma_name as geolevel_detail,\na.location_type_code,a.daypart,a.destination_desc,\na.monthend_date as current_monthend_date,\na.sales_sub_total as current_sales_sub_total,\na.transactions as current_transactions,\na.purchaser_visits as current_purchaser_visits,\na.credit_txn as current_credit_txn,\na.total_items_promo_count as current_total_items_promo_count,\na.total_items_sold_count as current_total_items_sold_count,\na.actual_days as current_actual_days,\na.avail_days as current_avail_days,\na.price_index as current_price_index,\na.unique_cfa_one_ids as current_unique_cfa_one_ids,\na.unique_hashes as current_unique_hashes,\na.hash_transactions as current_hash_transactions,\na.hash_per_customer as current_hash_per_customer,\na.previous_year_monthend_date as check_date,\nb.monthend_date as previous_monthend_date,\nb.sales_sub_total as previous_sales_sub_total,\nb.transactions as previous_transactions,\nb.purchaser_visits as previous_purchaser_visits,\nb.credit_txn as previous_credit_txn,\nb.total_items_promo_count as previous_total_items_promo_count,\nb.total_items_sold_count as previous_total_items_sold_count,\nb.actual_days as previous_actual_days,\nb.avail_days as previous_avail_days,\nb.price_index as previous_price_index,\nb.unique_cfa_one_ids as previous_unique_cfa_one_ids,\nb.unique_hashes as previous_unique_hashes,\nb.hash_transactions as previous_hash_transactions,\nb.hash_per_customer as previous_hash_per_customer\nfrom twentytwo a \ninner join twentyone b\non a.look_back_period = b.look_back_period \nand a.same_store = b.same_store \nand a.dma_name = b.dma_name\nand a.location_type_code = b.location_type_code \nand a.daypart = b.daypart\nand a.destination_desc = b.destination_desc\nand a.previous_year_monthend_date = b.monthend_date\norder by same_store,location_type_code,daypart,destination_desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.market__big_join", "model.source_of_sales_change_lcarr.market__big_join"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "market", "final_output", "market__final_output"], "unique_id": "model.source_of_sales_change_lcarr.market__final_output", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "market/final_output/market__final_output.sql", "original_file_path": "models/market/final_output/market__final_output.sql", "name": "market__final_output", "alias": "lcarr_sosx_market__final_output", "checksum": {"name": "sha256", "checksum": "abf91d6af180dc12f925ba88d73e8d6fffcd74782a5392766fe5df430176a641"}, "tags": [], "refs": [["market__big_join"], ["market__big_join"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/market/final_output/market__final_output.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656339508.60081, "compiled_sql": "with twentytwo as (\nselect *\nfrom \"cfa\".\"public\".\"lcarr_sosx_market__big_join\" \nwhere monthend_date = cast('02-28-2022' as date) \n), twentyone as ( \nselect * \nfrom \"cfa\".\"public\".\"lcarr_sosx_market__big_join\"\nwhere monthend_date = cast('02-28-2021' as date)\n) \n\nselect a.quarter,\na.look_back_period,a.same_store,\n'Market' as geolevel, \na.dma_name as geolevel_detail,\na.location_type_code,a.daypart,a.destination_desc,\na.monthend_date as current_monthend_date,\na.sales_sub_total as current_sales_sub_total,\na.transactions as current_transactions,\na.purchaser_visits as current_purchaser_visits,\na.credit_txn as current_credit_txn,\na.total_items_promo_count as current_total_items_promo_count,\na.total_items_sold_count as current_total_items_sold_count,\na.actual_days as current_actual_days,\na.avail_days as current_avail_days,\na.price_index as current_price_index,\na.unique_cfa_one_ids as current_unique_cfa_one_ids,\na.unique_hashes as current_unique_hashes,\na.hash_transactions as current_hash_transactions,\na.hash_per_customer as current_hash_per_customer,\na.previous_year_monthend_date as check_date,\nb.monthend_date as previous_monthend_date,\nb.sales_sub_total as previous_sales_sub_total,\nb.transactions as previous_transactions,\nb.purchaser_visits as previous_purchaser_visits,\nb.credit_txn as previous_credit_txn,\nb.total_items_promo_count as previous_total_items_promo_count,\nb.total_items_sold_count as previous_total_items_sold_count,\nb.actual_days as previous_actual_days,\nb.avail_days as previous_avail_days,\nb.price_index as previous_price_index,\nb.unique_cfa_one_ids as previous_unique_cfa_one_ids,\nb.unique_hashes as previous_unique_hashes,\nb.hash_transactions as previous_hash_transactions,\nb.hash_per_customer as previous_hash_per_customer\nfrom twentytwo a \ninner join twentyone b\non a.look_back_period = b.look_back_period \nand a.same_store = b.same_store \nand a.dma_name = b.dma_name\nand a.location_type_code = b.location_type_code \nand a.daypart = b.daypart\nand a.destination_desc = b.destination_desc\nand a.previous_year_monthend_date = b.monthend_date\norder by same_store,location_type_code,daypart,destination_desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_market__final_output\""}, "model.source_of_sales_change_lcarr.national_agg__same_store_all_store": {"raw_sql": "with transaction_same_store as (\n  select a.*,b.same_store_eligible,b.actual_days,b.avail_days\n  from {{ref('national_agg__month_lookback')}} a\n  left join {{ref('stg__fct_same_store')}} b\n  on a.location_num = b.location_num\n  and a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  order by dma_name,location_num,look_back_period,location_type_code,daypart,destination_desc,monthend_date\n), transaction_agg_all_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'All Stores' as same_store,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days, \n  sum(avail_days) as avail_days\n  from transaction_same_store\n  group by 1,2,3,4,5,6,7\n), transaction_agg_same_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'Same Stores' as same_store,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days,\n  sum(avail_days) as avail_days\n  from transaction_same_store\n  where same_store_eligible = 1 \n  group by 1,2,3,4,5,6,7\n), union_all_same_market_transactions as ( \n  select * from transaction_agg_all_stores\n  union\n  select * from transaction_agg_same_stores\n)\nselect * from union_all_same_market_transactions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.national_agg__month_lookback", "model.source_of_sales_change_lcarr.stg__fct_same_store"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "national", "aggregations", "national_agg__same_store_all_store"], "unique_id": "model.source_of_sales_change_lcarr.national_agg__same_store_all_store", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "national/aggregations/national_agg__same_store_all_store.sql", "original_file_path": "models/national/aggregations/national_agg__same_store_all_store.sql", "name": "national_agg__same_store_all_store", "alias": "lcarr_sosx_national_agg__same_store_all_store", "checksum": {"name": "sha256", "checksum": "d4e4968894317b88976c91167b2ee721ff588b931f1cafa6c486f48afee8e1a8"}, "tags": [], "refs": [["national_agg__month_lookback"], ["stg__fct_same_store"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/national/aggregations/national_agg__same_store_all_store.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1656347066.110848, "compiled_sql": "with transaction_same_store as (\n  select a.*,b.same_store_eligible,b.actual_days,b.avail_days\n  from \"cfa\".\"public\".\"lcarr_sosx_national_agg__month_lookback\" a\n  left join \"cfa\".\"public\".\"lcarr_sosx_stg__fct_same_store\" b\n  on a.location_num = b.location_num\n  and a.look_back_period = b.look_back_period\n  and a.monthend_date = b.monthend_date\n  order by dma_name,location_num,look_back_period,location_type_code,daypart,destination_desc,monthend_date\n), transaction_agg_all_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'All Stores' as same_store,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days, \n  sum(avail_days) as avail_days\n  from transaction_same_store\n  group by 1,2,3,4,5,6,7\n), transaction_agg_same_stores as ( \n  select quarter,\n  monthend_date,look_back_period,'Same Stores' as same_store,\n  location_type_code,daypart,destination_desc,\n  sum(sales_sub_total) as sales_sub_total,\n  sum(transactions) as transactions,sum(purchaser_visits) as purchaser_visits,\n  sum(credit_txn) as credit_txn,sum(total_items_promo_count) as total_items_promo_count,\n  sum(total_items_sold_count) as total_items_sold_count,\n  sum(actual_days) as actual_days,\n  sum(avail_days) as avail_days\n  from transaction_same_store\n  where same_store_eligible = 1 \n  group by 1,2,3,4,5,6,7\n), union_all_same_market_transactions as ( \n  select * from transaction_agg_all_stores\n  union\n  select * from transaction_agg_same_stores\n)\nselect * from union_all_same_market_transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_national_agg__same_store_all_store\""}, "model.source_of_sales_change_lcarr.final_output_all": {"raw_sql": "with final_output_all as ( \n    select * \n    from {{ref('national__final_output')}}\n    union \n    select * \n    from {{ref('region__final_output')}}\n    union \n    select * \n    from {{ref('ast__final_output')}}\n    union\n    select * \n    from {{ref('market__final_output')}}\n) \n\nselect * from final_output_all", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.source_of_sales_change_lcarr.national__final_output", "model.source_of_sales_change_lcarr.region__final_output", "model.source_of_sales_change_lcarr.ast__final_output", "model.source_of_sales_change_lcarr.market__final_output"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "bind": false, "post-hook": [], "pre-hook": []}, "database": "cfa", "schema": "public", "fqn": ["source_of_sales_change_lcarr", "final_output_all"], "unique_id": "model.source_of_sales_change_lcarr.final_output_all", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "final_output_all.sql", "original_file_path": "models/final_output_all.sql", "name": "final_output_all", "alias": "lcarr_sosx_final_output_all", "checksum": {"name": "sha256", "checksum": "d411ecf016f27d59c720afc21593c9e0691202ba186f9c290c13c152a531ba1d"}, "tags": [], "refs": [["national__final_output"], ["region__final_output"], ["ast__final_output"], ["market__final_output"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/source_of_sales_change_lcarr/models/final_output_all.sql", "build_path": null, "deferred": false, "unrendered_config": {"bind": false}, "created_at": 1656360741.4339929, "compiled_sql": "with final_output_all as ( \n    select * \n    from \"cfa\".\"public\".\"lcarr_sosx_national__final_output\"\n    union \n    select * \n    from \"cfa\".\"public\".\"lcarr_sosx_region__final_output\"\n    union \n    select * \n    from \"cfa\".\"public\".\"lcarr_sosx_ast__final_output\"\n    union\n    select * \n    from \"cfa\".\"public\".\"lcarr_sosx_market__final_output\"\n) \n\nselect * from final_output_all", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"cfa\".\"public\".\"lcarr_sosx_final_output_all\""}}, "sources": {"source.source_of_sales_change_lcarr.pos.trans_header": {"fqn": ["source_of_sales_change_lcarr", "pos", "trans_header"], "database": "cfa", "schema": "pos", "unique_id": "source.source_of_sales_change_lcarr.pos.trans_header", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "trans_header", "source_name": "pos", "source_description": "", "loader": "", "identifier": "trans_header", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"cfa\".\"pos\".\"trans_header\"", "created_at": 1656095234.402158}, "source.source_of_sales_change_lcarr.pos.trans_tender": {"fqn": ["source_of_sales_change_lcarr", "pos", "trans_tender"], "database": "cfa", "schema": "pos", "unique_id": "source.source_of_sales_change_lcarr.pos.trans_tender", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "trans_tender", "source_name": "pos", "source_description": "", "loader": "", "identifier": "trans_tender", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"cfa\".\"pos\".\"trans_tender\"", "created_at": 1656095234.4023528}, "source.source_of_sales_change_lcarr.pos.trans_item": {"fqn": ["source_of_sales_change_lcarr", "pos", "trans_item"], "database": "cfa", "schema": "pos", "unique_id": "source.source_of_sales_change_lcarr.pos.trans_item", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "trans_item", "source_name": "pos", "source_description": "", "loader": "", "identifier": "trans_item", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"cfa\".\"pos\".\"trans_item\"", "created_at": 1656095234.4025102}, "source.source_of_sales_change_lcarr.pos.transaction_status": {"fqn": ["source_of_sales_change_lcarr", "pos", "transaction_status"], "database": "cfa", "schema": "pos", "unique_id": "source.source_of_sales_change_lcarr.pos.transaction_status", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "transaction_status", "source_name": "pos", "source_description": "", "loader": "", "identifier": "transaction_status", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"cfa\".\"pos\".\"transaction_status\"", "created_at": 1656095234.402655}, "source.source_of_sales_change_lcarr.public.location_attributes": {"fqn": ["source_of_sales_change_lcarr", "public", "location_attributes"], "database": "cfa", "schema": "public", "unique_id": "source.source_of_sales_change_lcarr.public.location_attributes", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "location_attributes", "source_name": "public", "source_description": "", "loader": "", "identifier": "location_attributes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"cfa\".\"public\".\"location_attributes\"", "created_at": 1656095234.402795}, "source.source_of_sales_change_lcarr.public.dim_date": {"fqn": ["source_of_sales_change_lcarr", "public", "dim_date"], "database": "cfa", "schema": "public", "unique_id": "source.source_of_sales_change_lcarr.public.dim_date", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "dim_date", "source_name": "public", "source_description": "", "loader": "", "identifier": "dim_date", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"cfa\".\"public\".\"dim_date\"", "created_at": 1656095234.402933}, "source.source_of_sales_change_lcarr.common.d_destination": {"fqn": ["source_of_sales_change_lcarr", "common", "d_destination"], "database": "cfa", "schema": "common", "unique_id": "source.source_of_sales_change_lcarr.common.d_destination", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "d_destination", "source_name": "common", "source_description": "", "loader": "", "identifier": "d_destination", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"cfa\".\"common\".\"d_destination\"", "created_at": 1656095234.403069}, "source.source_of_sales_change_lcarr.apps.dim_item": {"fqn": ["source_of_sales_change_lcarr", "apps", "dim_item"], "database": "cfa", "schema": "apps", "unique_id": "source.source_of_sales_change_lcarr.apps.dim_item", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "dim_item", "source_name": "apps", "source_description": "", "loader": "", "identifier": "dim_item", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"cfa\".\"apps\".\"dim_item\"", "created_at": 1656095234.403202}, "source.source_of_sales_change_lcarr.apps.time_d": {"fqn": ["source_of_sales_change_lcarr", "apps", "time_d"], "database": "cfa", "schema": "apps", "unique_id": "source.source_of_sales_change_lcarr.apps.time_d", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "time_d", "source_name": "apps", "source_description": "", "loader": "", "identifier": "time_d", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"cfa\".\"apps\".\"time_d\"", "created_at": 1656095234.4033349}, "source.source_of_sales_change_lcarr.fin_lh.fcr_locations_sales_eligibility": {"fqn": ["source_of_sales_change_lcarr", "fin_lh", "fcr_locations_sales_eligibility"], "database": "cfa", "schema": "fin_lh", "unique_id": "source.source_of_sales_change_lcarr.fin_lh.fcr_locations_sales_eligibility", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fcr_locations_sales_eligibility", "source_name": "fin_lh", "source_description": "", "loader": "", "identifier": "fcr_locations_sales_eligibility", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"cfa\".\"fin_lh\".\"fcr_locations_sales_eligibility\"", "created_at": 1656095234.4034681}, "source.source_of_sales_change_lcarr.prodmix_dl.fcs_adjusted_sales": {"fqn": ["source_of_sales_change_lcarr", "prodmix_dl", "fcs_adjusted_sales"], "database": "cfa", "schema": "prodmix_dl", "unique_id": "source.source_of_sales_change_lcarr.prodmix_dl.fcs_adjusted_sales", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fcs_adjusted_sales", "source_name": "prodmix_dl", "source_description": "", "loader": "", "identifier": "fcs_adjusted_sales", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"cfa\".\"prodmix_dl\".\"fcs_adjusted_sales\"", "created_at": 1656095234.4036}}, "macros": {"macro.source_of_sales_change_lcarr.generate_alias_name": {"unique_id": "macro.source_of_sales_change_lcarr.generate_alias_name", "package_name": "source_of_sales_change_lcarr", "root_path": "/Users/lindsay.carr/DBT/dbt_source_of_sales_change_lcarr", "path": "macros/get_custom_alias.sql", "original_file_path": "macros/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {# Tim Chase - March 1, 2022 \n       Prefix the table name with the 'prefix' in vars. #}\n    {% set prefix = var('prefix') %}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ prefix ~ '_' ~ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.343192}, "macro.dbt_redshift.redshift__get_base_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_base_catalog", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_base_catalog", "macro_sql": "{% macro redshift__get_base_catalog(information_schema, schemas) -%}\n  {%- call statement('base_catalog', fetch_result=True) -%}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    with late_binding as (\n      select\n        '{{ database }}'::varchar as table_database,\n        table_schema,\n        table_name,\n        'LATE BINDING VIEW'::varchar as table_type,\n        null::text as table_comment,\n\n        column_name,\n        column_index,\n        column_type,\n        null::text as column_comment\n      from pg_get_late_binding_view_cols()\n        cols(table_schema name, table_name name, column_name name,\n             column_type varchar,\n             column_index int)\n        order by \"column_index\"\n    ),\n\n    early_binding as (\n        select\n            '{{ database }}'::varchar as table_database,\n            sch.nspname as table_schema,\n            tbl.relname as table_name,\n            case tbl.relkind\n                when 'v' then 'VIEW'\n                else 'BASE TABLE'\n            end as table_type,\n            tbl_desc.description as table_comment,\n            col.attname as column_name,\n            col.attnum as column_index,\n            pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n            col_desc.description as column_comment\n\n        from pg_catalog.pg_namespace sch\n        join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n        join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n        left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n        left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n        where (\n            {%- for schema in schemas -%}\n              upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n            and tbl.relkind in ('r', 'v', 'f', 'p')\n            and col.attnum > 0\n            and not col.attisdropped\n    ),\n\n    table_owners as (\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            tablename as table_name,\n            tableowner as table_owner\n\n        from pg_tables\n\n        union all\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            viewname as table_name,\n            viewowner as table_owner\n\n        from pg_views\n\n    ),\n\n    unioned as (\n\n        select *\n        from early_binding\n\n        union all\n\n        select *\n        from late_binding\n\n    )\n\n    select *,\n        table_database || '.' || table_schema || '.' || table_name as table_id\n\n    from unioned\n    join table_owners using (table_database, table_schema, table_name)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n\n    order by \"column_index\"\n  {%- endcall -%}\n\n  {{ return(load_result('base_catalog').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.365358}, "macro.dbt_redshift.redshift__get_extended_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_extended_catalog", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_extended_catalog", "macro_sql": "{% macro redshift__get_extended_catalog(schemas) %}\n  {%- call statement('extended_catalog', fetch_result=True) -%}\n\n    select\n        \"database\" || '.' || \"schema\" || '.' || \"table\" as table_id,\n\n        'Encoded'::text as \"stats:encoded:label\",\n        encoded as \"stats:encoded:value\",\n        'Indicates whether any column in the table has compression encoding defined.'::text as \"stats:encoded:description\",\n        true as \"stats:encoded:include\",\n\n        'Dist Style' as \"stats:diststyle:label\",\n        diststyle as \"stats:diststyle:value\",\n        'Distribution style or distribution key column, if key distribution is defined.'::text as \"stats:diststyle:description\",\n        true as \"stats:diststyle:include\",\n\n        'Sort Key 1' as \"stats:sortkey1:label\",\n        -- handle 0xFF byte in response for interleaved sort styles\n        case\n            when sortkey1 like 'INTERLEAVED%' then 'INTERLEAVED'::text\n            else sortkey1\n        end as \"stats:sortkey1:value\",\n        'First column in the sort key.'::text as \"stats:sortkey1:description\",\n        (sortkey1 is not null) as \"stats:sortkey1:include\",\n\n        'Max Varchar' as \"stats:max_varchar:label\",\n        max_varchar as \"stats:max_varchar:value\",\n        'Size of the largest column that uses a VARCHAR data type.'::text as \"stats:max_varchar:description\",\n        true as \"stats:max_varchar:include\",\n\n        -- exclude this, as the data is strangely returned with null-byte characters\n        'Sort Key 1 Encoding' as \"stats:sortkey1_enc:label\",\n        sortkey1_enc as \"stats:sortkey1_enc:value\",\n        'Compression encoding of the first column in the sort key.' as \"stats:sortkey1_enc:description\",\n        false as \"stats:sortkey1_enc:include\",\n\n        '# Sort Keys' as \"stats:sortkey_num:label\",\n        sortkey_num as \"stats:sortkey_num:value\",\n        'Number of columns defined as sort keys.' as \"stats:sortkey_num:description\",\n        (sortkey_num > 0) as \"stats:sortkey_num:include\",\n\n        'Approximate Size' as \"stats:size:label\",\n        size * 1000000 as \"stats:size:value\",\n        'Approximate size of the table, calculated from a count of 1MB blocks'::text as \"stats:size:description\",\n        true as \"stats:size:include\",\n\n        'Disk Utilization' as \"stats:pct_used:label\",\n        pct_used / 100.0 as \"stats:pct_used:value\",\n        'Percent of available space that is used by the table.'::text as \"stats:pct_used:description\",\n        true as \"stats:pct_used:include\",\n\n        'Unsorted %' as \"stats:unsorted:label\",\n        unsorted / 100.0 as \"stats:unsorted:value\",\n        'Percent of unsorted rows in the table.'::text as \"stats:unsorted:description\",\n        (unsorted is not null) as \"stats:unsorted:include\",\n\n        'Stats Off' as \"stats:stats_off:label\",\n        stats_off as \"stats:stats_off:value\",\n        'Number that indicates how stale the table statistics are; 0 is current, 100 is out of date.'::text as \"stats:stats_off:description\",\n        true as \"stats:stats_off:include\",\n\n        'Approximate Row Count' as \"stats:rows:label\",\n        tbl_rows as \"stats:rows:value\",\n        'Approximate number of rows in the table. This value includes rows marked for deletion, but not yet vacuumed.'::text as \"stats:rows:description\",\n        true as \"stats:rows:include\",\n\n        'Sort Key Skew' as \"stats:skew_sortkey1:label\",\n        skew_sortkey1 as \"stats:skew_sortkey1:value\",\n        'Ratio of the size of the largest non-sort key column to the size of the first column of the sort key.'::text as \"stats:skew_sortkey1:description\",\n        (skew_sortkey1 is not null) as \"stats:skew_sortkey1:include\",\n\n        'Skew Rows' as \"stats:skew_rows:label\",\n        skew_rows as \"stats:skew_rows:value\",\n        'Ratio of the number of rows in the slice with the most rows to the number of rows in the slice with the fewest rows.'::text as \"stats:skew_rows:description\",\n        (skew_rows is not null) as \"stats:skew_rows:include\"\n\n    from svv_table_info\n    where (\n        {%- for schema in schemas -%}\n          upper(schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n\n  {%- endcall -%}\n\n  {{ return(load_result('extended_catalog').table) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.367975}, "macro.dbt_redshift.redshift__can_select_from": {"unique_id": "macro.dbt_redshift.redshift__can_select_from", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__can_select_from", "macro_sql": "{% macro redshift__can_select_from(table_name) %}\n\n  {%- call statement('has_table_privilege', fetch_result=True) -%}\n\n    select has_table_privilege(current_user, '{{ table_name }}', 'SELECT') as can_select\n\n  {%- endcall -%}\n\n  {% set can_select = load_result('has_table_privilege').table[0]['can_select'] %}\n  {{ return(can_select) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.369843}, "macro.dbt_redshift.redshift__no_svv_table_info_warning": {"unique_id": "macro.dbt_redshift.redshift__no_svv_table_info_warning", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__no_svv_table_info_warning", "macro_sql": "{% macro redshift__no_svv_table_info_warning() %}\n\n    {% set msg %}\n\n    Warning: The database user \"{{ target.user }}\" has insufficient permissions to\n    query the \"svv_table_info\" table. Please grant SELECT permissions on this table\n    to the \"{{ target.user }}\" user to fetch extended table details from Redshift.\n\n    {% endset %}\n\n    {{ log(msg, info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.371507}, "macro.dbt_redshift.redshift__get_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_catalog", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_catalog", "macro_sql": "{% macro redshift__get_catalog(information_schema, schemas) %}\n\n    {#-- Compute a left-outer join in memory. Some Redshift queries are\n      -- leader-only, and cannot be joined to other compute-based queries #}\n\n    {% set catalog = redshift__get_base_catalog(information_schema, schemas) %}\n\n    {% set select_extended =  redshift__can_select_from('svv_table_info') %}\n    {% if select_extended %}\n        {% set extended_catalog = redshift__get_extended_catalog(schemas) %}\n        {% set catalog = catalog.join(extended_catalog, 'table_id') %}\n    {% else %}\n        {{ redshift__no_svv_table_info_warning() }}\n    {% endif %}\n\n    {{ return(catalog.exclude(['table_id'])) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_base_catalog", "macro.dbt_redshift.redshift__can_select_from", "macro.dbt_redshift.redshift__get_extended_catalog", "macro.dbt_redshift.redshift__no_svv_table_info_warning"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.375732}, "macro.dbt_redshift.redshift__get_relations": {"unique_id": "macro.dbt_redshift.redshift__get_relations", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "redshift__get_relations", "macro_sql": "{% macro redshift__get_relations () -%}\n  {{ return(dbt.postgres__get_relations()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.377145}, "macro.dbt_redshift.dist": {"unique_id": "macro.dbt_redshift.dist", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dist", "macro_sql": "{% macro dist(dist) %}\n  {%- if dist is not none -%}\n      {%- set dist = dist.strip().lower() -%}\n\n      {%- if dist in ['all', 'even'] -%}\n        diststyle {{ dist }}\n      {%- elif dist == \"auto\" -%}\n      {%- else -%}\n        diststyle key distkey ({{ dist }})\n      {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.428424}, "macro.dbt_redshift.sort": {"unique_id": "macro.dbt_redshift.sort", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "sort", "macro_sql": "{% macro sort(sort_type, sort) %}\n  {%- if sort is not none %}\n      {{ sort_type | default('compound', boolean=true) }} sortkey(\n      {%- if sort is string -%}\n        {%- set sort = [sort] -%}\n      {%- endif -%}\n      {%- for item in sort -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.430758}, "macro.dbt_redshift.redshift__create_table_as": {"unique_id": "macro.dbt_redshift.redshift__create_table_as", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_table_as", "macro_sql": "{% macro redshift__create_table_as(temporary, relation, sql) -%}\n\n  {%- set _dist = config.get('dist') -%}\n  {%- set _sort_type = config.get(\n          'sort_type',\n          validator=validation.any['compound', 'interleaved']) -%}\n  {%- set _sort = config.get(\n          'sort',\n          validator=validation.any[list, basestring]) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {%- set backup = config.get('backup') -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n    {% if backup == false -%}backup no{%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.dist", "macro.dbt_redshift.sort"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.43548}, "macro.dbt_redshift.redshift__create_view_as": {"unique_id": "macro.dbt_redshift.redshift__create_view_as", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_view_as", "macro_sql": "{% macro redshift__create_view_as(relation, sql) -%}\n  {%- set binding = config.get('bind', default=True) -%}\n\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation }} as (\n    {{ sql }}\n  ) {{ bind_qualifier }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.438699}, "macro.dbt_redshift.redshift__create_schema": {"unique_id": "macro.dbt_redshift.redshift__create_schema", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_schema", "macro_sql": "{% macro redshift__create_schema(relation) -%}\n  {{ postgres__create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.4394188}, "macro.dbt_redshift.redshift__drop_schema": {"unique_id": "macro.dbt_redshift.redshift__drop_schema", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__drop_schema", "macro_sql": "{% macro redshift__drop_schema(relation) -%}\n  {{ postgres__drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.440033}, "macro.dbt_redshift.redshift__get_columns_in_relation": {"unique_id": "macro.dbt_redshift.redshift__get_columns_in_relation", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__get_columns_in_relation", "macro_sql": "{% macro redshift__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with bound_views as (\n        select\n          ordinal_position,\n          table_schema,\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n        from information_schema.\"columns\"\n        where table_name = '{{ relation.identifier }}'\n    ),\n\n    unbound_views as (\n      select\n        ordinal_position,\n        view_schema,\n        col_name,\n        case\n          when col_type ilike 'character varying%' then\n            'character varying'\n          when col_type ilike 'numeric%' then 'numeric'\n          else col_type\n        end as col_type,\n        case\n          when col_type like 'character%'\n          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n\n      from pg_get_late_binding_view_cols()\n      cols(view_schema name, view_name name, col_name name,\n           col_type varchar, ordinal_position int)\n      where view_name = '{{ relation.identifier }}'\n    ),\n\n    external_views as (\n      select\n        columnnum,\n        schemaname,\n        columnname,\n        case\n          when external_type ilike 'character varying%' or external_type ilike 'varchar%'\n          then 'character varying'\n          when external_type ilike 'numeric%' then 'numeric'\n          else external_type\n        end as external_type,\n        case\n          when external_type like 'character%' or external_type like 'varchar%'\n          then nullif(\n            REGEXP_SUBSTR(external_type, '[0-9]+'),\n            '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n      from\n        pg_catalog.svv_external_columns\n      where\n        schemaname = '{{ relation.schema }}'\n        and tablename = '{{ relation.identifier }}'\n\n    ),\n\n    unioned as (\n      select * from bound_views\n      union all\n      select * from unbound_views\n      union all\n      select * from external_views\n    )\n\n    select\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n    from unioned\n    {% if relation.schema %}\n    where table_schema = '{{ relation.schema }}'\n    {% endif %}\n    order by ordinal_position\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.444018}, "macro.dbt_redshift.redshift__list_relations_without_caching": {"unique_id": "macro.dbt_redshift.redshift__list_relations_without_caching", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_relations_without_caching", "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\n  {{ return(postgres__list_relations_without_caching(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.4448059}, "macro.dbt_redshift.redshift__information_schema_name": {"unique_id": "macro.dbt_redshift.redshift__information_schema_name", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__information_schema_name", "macro_sql": "{% macro redshift__information_schema_name(database) -%}\n  {{ return(postgres__information_schema_name(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.4454799}, "macro.dbt_redshift.redshift__list_schemas": {"unique_id": "macro.dbt_redshift.redshift__list_schemas", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_schemas", "macro_sql": "{% macro redshift__list_schemas(database) -%}\n  {{ return(postgres__list_schemas(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.4461288}, "macro.dbt_redshift.redshift__check_schema_exists": {"unique_id": "macro.dbt_redshift.redshift__check_schema_exists", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__check_schema_exists", "macro_sql": "{% macro redshift__check_schema_exists(information_schema, schema) -%}\n  {{ return(postgres__check_schema_exists(information_schema, schema)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.446885}, "macro.dbt_redshift.redshift__current_timestamp": {"unique_id": "macro.dbt_redshift.redshift__current_timestamp", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() -%}\n  getdate()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.4472342}, "macro.dbt_redshift.redshift__snapshot_get_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_get_time", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__snapshot_get_time", "macro_sql": "{% macro redshift__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.447718}, "macro.dbt_redshift.redshift__snapshot_string_as_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_string_as_time", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__snapshot_string_as_time", "macro_sql": "{% macro redshift__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.448554}, "macro.dbt_redshift.redshift__make_temp_relation": {"unique_id": "macro.dbt_redshift.redshift__make_temp_relation", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__make_temp_relation", "macro_sql": "{% macro redshift__make_temp_relation(base_relation, suffix) %}\n    {% do return(postgres__make_temp_relation(base_relation, suffix)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.4495769}, "macro.dbt_redshift.redshift__persist_docs": {"unique_id": "macro.dbt_redshift.redshift__persist_docs", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__persist_docs", "macro_sql": "{% macro redshift__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {# Override: do not set column comments for LBVs #}\n  {% set is_lbv = config.get('materialized') == 'view' and config.get('bind') == false %}\n  {% if for_columns and config.persist_column_docs() and model.columns and not is_lbv %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.452706}, "macro.dbt_redshift.redshift__alter_relation_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_relation_comment", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_relation_comment", "macro_sql": "{% macro redshift__alter_relation_comment(relation, comment) %}\n  {% do return(postgres__alter_relation_comment(relation, comment)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.4536161}, "macro.dbt_redshift.redshift__alter_column_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_column_comment", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_column_comment", "macro_sql": "{% macro redshift__alter_column_comment(relation, column_dict) %}\n  {% do return(postgres__alter_column_comment(relation, column_dict)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.4544609}, "macro.dbt_redshift.redshift__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_redshift.redshift__alter_relation_add_remove_columns", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_relation_add_remove_columns", "macro_sql": "{% macro redshift__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n  \n    {% for column in add_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} add column {{ column.name }} {{ column.data_type }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n  \n  {% if remove_columns %}\n  \n    {% for column in remove_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} drop column {{ column.name }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.4587321}, "macro.dbt_redshift.redshift__snapshot_merge_sql": {"unique_id": "macro.dbt_redshift.redshift__snapshot_merge_sql", "package_name": "dbt_redshift", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/redshift", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "redshift__snapshot_merge_sql", "macro_sql": "{% macro redshift__snapshot_merge_sql(target, source, insert_cols) -%}\n    {{ postgres__snapshot_merge_sql(target, source, insert_cols) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.4602082}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.465006}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.467947}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.492814}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.4953148}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.49691}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.498453}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.500709}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.502482}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.5033169}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.505394}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.508182}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.508641}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.509548}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.5100539}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.514293}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.52216}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.52433}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.5298839}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.5338712}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.549784}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.550747}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.551434}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.552091}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.552744}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.554774}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.556332}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.558332}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.560823}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.562175}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.578829}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.579675}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.580868}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.5823429}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.582828}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.587214}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.588335}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.589167}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.59514}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.605644}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.6191308}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.620522}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.621309}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.621718}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.62268}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.627965}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.6290681}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.631059}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.6331909}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.66616}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.678536}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.681389}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.683402}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.685529}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.687802}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.6929832}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.6957629}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.697599}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.704491}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.7081559}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.708983}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.710162}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.711083}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.712877}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.714862}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.7275572}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.739472}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.743347}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.747222}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.7500522}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.760339}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.762772}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.763275}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.763818}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.764909}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.774882}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.7762518}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.7769}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.780611}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.781923}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.78247}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.783015}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.7837598}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.792534}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.801616}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8040671}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.804682}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.806108}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.806504}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8069718}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.807583}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8079581}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.809355}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.809854}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.813046}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.814284}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8150651}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.816486}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.817193}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.81824}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8195698}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.820265}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.821356}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.822016}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8228421}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.824809}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.827838}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.829348}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.830183}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.834535}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.838629}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.840801}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.841574}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.842816}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.843312}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.843741}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8442361}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.845526}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8459}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.846325}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.847389}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.852052}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.853293}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.853796}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.854506}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8550231}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.855464}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.856179}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.857048}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.85778}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8592389}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8598459}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.860374}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.861738}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.862135}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.86274}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.863856}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.865587}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.866034}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.866574}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.867028}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.867737}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.869331}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.872858}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8737888}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.87442}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.874885}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8753679}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.876032}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8766348}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.877619}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8781152}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.87855}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.882572}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.883002}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8838332}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.884328}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8852139}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8858151}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.887559}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.888245}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.890309}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.892063}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8926919}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.8934531}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1656095233.894182}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Users/lindsay.carr/DBT/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.source_of_sales_change_lcarr.region_agg__all_groupings": ["model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item"], "model.source_of_sales_change_lcarr.region_agg__month_lookback": ["model.source_of_sales_change_lcarr.region_agg__all_groupings"], "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct": ["model.source_of_sales_change_lcarr.stg__fct_same_store", "model.source_of_sales_change_lcarr.trans_item"], "model.source_of_sales_change_lcarr.national__final_output": ["model.source_of_sales_change_lcarr.national__big_join", "model.source_of_sales_change_lcarr.national__big_join"], "model.source_of_sales_change_lcarr.national__big_join": ["model.source_of_sales_change_lcarr.calc__dim_monthend_date", "model.source_of_sales_change_lcarr.calc__dim_price_index_3", "model.source_of_sales_change_lcarr.national_agg__distinct_join", "model.source_of_sales_change_lcarr.national_agg__same_store_all_store"], "model.source_of_sales_change_lcarr.national_agg__all_groupings": ["model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item"], "model.source_of_sales_change_lcarr.national_agg__month_lookback": ["model.source_of_sales_change_lcarr.national_agg__all_groupings"], "model.source_of_sales_change_lcarr.national_agg__distinct_join": ["model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs"], "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs": ["model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct"], "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct": ["model.source_of_sales_change_lcarr.stg__fct_same_store", "model.source_of_sales_change_lcarr.trans_item"], "model.source_of_sales_change_lcarr.national_agg__distinct_calcs": ["model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct"], "model.source_of_sales_change_lcarr.calc__dim_monthend_date": ["source.source_of_sales_change_lcarr.public.dim_date"], "model.source_of_sales_change_lcarr.stg__dim_fcr_loc_sales_elig": ["source.source_of_sales_change_lcarr.fin_lh.fcr_locations_sales_eligibility"], "model.source_of_sales_change_lcarr.stg__dim_same_store": ["model.source_of_sales_change_lcarr.calc__dim_monthend_date", "model.source_of_sales_change_lcarr.stg__dim_fcr_loc_sales_elig"], "model.source_of_sales_change_lcarr.stg__fct_same_store": ["model.source_of_sales_change_lcarr.stg__dim_same_store", "model.source_of_sales_change_lcarr.stg__dim_same_store"], "model.source_of_sales_change_lcarr.tender": ["model.source_of_sales_change_lcarr.stg__dim_location", "model.source_of_sales_change_lcarr.stg__fct_tender"], "model.source_of_sales_change_lcarr.item": ["model.source_of_sales_change_lcarr.stg__dim_item", "model.source_of_sales_change_lcarr.stg__dim_location", "model.source_of_sales_change_lcarr.stg__fct_item"], "model.source_of_sales_change_lcarr.trans_item": ["model.source_of_sales_change_lcarr.item", "model.source_of_sales_change_lcarr.trans_detail"], "model.source_of_sales_change_lcarr.trans_detail": ["model.source_of_sales_change_lcarr.tender", "model.source_of_sales_change_lcarr.transaction"], "model.source_of_sales_change_lcarr.transaction": ["model.source_of_sales_change_lcarr.stg__dim_daypart", "model.source_of_sales_change_lcarr.stg__dim_destination", "model.source_of_sales_change_lcarr.stg__dim_location", "model.source_of_sales_change_lcarr.stg__fct_transaction"], "model.source_of_sales_change_lcarr.stg__dim_location": ["source.source_of_sales_change_lcarr.public.location_attributes"], "model.source_of_sales_change_lcarr.stg__dim_transaction_status": ["source.source_of_sales_change_lcarr.pos.transaction_status"], "model.source_of_sales_change_lcarr.stg__dim_destination": ["source.source_of_sales_change_lcarr.common.d_destination"], "model.source_of_sales_change_lcarr.stg__dim_daypart": ["source.source_of_sales_change_lcarr.apps.time_d"], "model.source_of_sales_change_lcarr.stg__fct_item": ["model.source_of_sales_change_lcarr.stg__dim_transaction_status", "source.source_of_sales_change_lcarr.pos.trans_item"], "model.source_of_sales_change_lcarr.stg__fct_transaction": ["source.source_of_sales_change_lcarr.pos.trans_header"], "model.source_of_sales_change_lcarr.stg__dim_item": ["source.source_of_sales_change_lcarr.apps.dim_item"], "model.source_of_sales_change_lcarr.stg__fct_tender": ["model.source_of_sales_change_lcarr.stg__dim_transaction_status", "source.source_of_sales_change_lcarr.pos.trans_tender"], "model.source_of_sales_change_lcarr.calc__error": ["model.source_of_sales_change_lcarr.calc__dim_monthend_date", "model.source_of_sales_change_lcarr.stg__dim_adj_sales"], "model.source_of_sales_change_lcarr.stg__dim_adj_sales": ["source.source_of_sales_change_lcarr.prodmix_dl.fcs_adjusted_sales"], "model.source_of_sales_change_lcarr.calc__dim_price_index_3": ["model.source_of_sales_change_lcarr.calc__dim_price_index_2", "model.source_of_sales_change_lcarr.calc__dim_price_index_2", "model.source_of_sales_change_lcarr.calc__dim_price_index_2"], "model.source_of_sales_change_lcarr.calc__dim_price_index_2": ["model.source_of_sales_change_lcarr.calc__dim_price_index_1", "model.source_of_sales_change_lcarr.stg__fct_same_store"], "model.source_of_sales_change_lcarr.calc__dim_price_index_1": ["model.source_of_sales_change_lcarr.stg__dim_adj_sales", "model.source_of_sales_change_lcarr.stg__dim_location"], "test.source_of_sales_change_lcarr.unique_trans_detail_trans_id.bf19cf4015": ["model.source_of_sales_change_lcarr.trans_detail"], "test.source_of_sales_change_lcarr.not_null_trans_detail_trans_id.39702ad66f": ["model.source_of_sales_change_lcarr.trans_detail"], "test.source_of_sales_change_lcarr.unique_item_trans_id.31db52b29b": ["model.source_of_sales_change_lcarr.item"], "test.source_of_sales_change_lcarr.not_null_item_trans_id.f3230ec97f": ["model.source_of_sales_change_lcarr.item"], "model.source_of_sales_change_lcarr.region_agg__distinct_calcs": ["model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct"], "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs": ["model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct"], "model.source_of_sales_change_lcarr.region_agg__distinct_join": ["model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs"], "model.source_of_sales_change_lcarr.region_agg__same_store_all_store": ["model.source_of_sales_change_lcarr.region_agg__month_lookback", "model.source_of_sales_change_lcarr.stg__fct_same_store"], "model.source_of_sales_change_lcarr.region__big_join": ["model.source_of_sales_change_lcarr.calc__dim_monthend_date", "model.source_of_sales_change_lcarr.calc__dim_price_index_3", "model.source_of_sales_change_lcarr.region_agg__distinct_join", "model.source_of_sales_change_lcarr.region_agg__same_store_all_store"], "model.source_of_sales_change_lcarr.region__final_output": ["model.source_of_sales_change_lcarr.region__big_join", "model.source_of_sales_change_lcarr.region__big_join"], "model.source_of_sales_change_lcarr.ast__big_join": ["model.source_of_sales_change_lcarr.ast_agg__distinct_join", "model.source_of_sales_change_lcarr.ast_agg__same_store_all_store", "model.source_of_sales_change_lcarr.calc__dim_monthend_date", "model.source_of_sales_change_lcarr.calc__dim_price_index_3"], "model.source_of_sales_change_lcarr.ast_agg__all_groupings": ["model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item"], "model.source_of_sales_change_lcarr.ast_agg__same_store_all_store": ["model.source_of_sales_change_lcarr.ast_agg__month_lookback", "model.source_of_sales_change_lcarr.stg__fct_same_store"], "model.source_of_sales_change_lcarr.ast__final_output": ["model.source_of_sales_change_lcarr.ast__big_join", "model.source_of_sales_change_lcarr.ast__big_join"], "model.source_of_sales_change_lcarr.ast_agg__month_lookback": ["model.source_of_sales_change_lcarr.ast_agg__all_groupings"], "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct": ["model.source_of_sales_change_lcarr.stg__fct_same_store", "model.source_of_sales_change_lcarr.trans_item"], "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs": ["model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct"], "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs": ["model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct"], "model.source_of_sales_change_lcarr.ast_agg__distinct_join": ["model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs"], "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct": ["model.source_of_sales_change_lcarr.stg__fct_same_store", "model.source_of_sales_change_lcarr.trans_item"], "model.source_of_sales_change_lcarr.market__big_join": ["model.source_of_sales_change_lcarr.calc__dim_monthend_date", "model.source_of_sales_change_lcarr.calc__dim_price_index_3", "model.source_of_sales_change_lcarr.market_agg__distinct_join", "model.source_of_sales_change_lcarr.market_agg__same_store_all_store"], "model.source_of_sales_change_lcarr.market_agg__distinct_join": ["model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs"], "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs": ["model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct"], "model.source_of_sales_change_lcarr.market_agg__month_lookback": ["model.source_of_sales_change_lcarr.market_agg__all_groupings"], "model.source_of_sales_change_lcarr.market_agg__all_groupings": ["model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item", "model.source_of_sales_change_lcarr.trans_item"], "model.source_of_sales_change_lcarr.market_agg__same_store_all_store": ["model.source_of_sales_change_lcarr.market_agg__month_lookback", "model.source_of_sales_change_lcarr.stg__fct_same_store"], "model.source_of_sales_change_lcarr.market_agg__distinct_calcs": ["model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct"], "model.source_of_sales_change_lcarr.market__final_output": ["model.source_of_sales_change_lcarr.market__big_join", "model.source_of_sales_change_lcarr.market__big_join"], "model.source_of_sales_change_lcarr.national_agg__same_store_all_store": ["model.source_of_sales_change_lcarr.national_agg__month_lookback", "model.source_of_sales_change_lcarr.stg__fct_same_store"], "model.source_of_sales_change_lcarr.final_output_all": ["model.source_of_sales_change_lcarr.ast__final_output", "model.source_of_sales_change_lcarr.market__final_output", "model.source_of_sales_change_lcarr.national__final_output", "model.source_of_sales_change_lcarr.region__final_output"], "source.source_of_sales_change_lcarr.pos.trans_header": [], "source.source_of_sales_change_lcarr.pos.trans_tender": [], "source.source_of_sales_change_lcarr.pos.trans_item": [], "source.source_of_sales_change_lcarr.pos.transaction_status": [], "source.source_of_sales_change_lcarr.public.location_attributes": [], "source.source_of_sales_change_lcarr.public.dim_date": [], "source.source_of_sales_change_lcarr.common.d_destination": [], "source.source_of_sales_change_lcarr.apps.dim_item": [], "source.source_of_sales_change_lcarr.apps.time_d": [], "source.source_of_sales_change_lcarr.fin_lh.fcr_locations_sales_eligibility": [], "source.source_of_sales_change_lcarr.prodmix_dl.fcs_adjusted_sales": []}, "child_map": {"model.source_of_sales_change_lcarr.region_agg__all_groupings": ["model.source_of_sales_change_lcarr.region_agg__month_lookback"], "model.source_of_sales_change_lcarr.region_agg__month_lookback": ["model.source_of_sales_change_lcarr.region_agg__same_store_all_store"], "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct": ["model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__distinct_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs"], "model.source_of_sales_change_lcarr.national__final_output": ["model.source_of_sales_change_lcarr.final_output_all"], "model.source_of_sales_change_lcarr.national__big_join": ["model.source_of_sales_change_lcarr.national__final_output", "model.source_of_sales_change_lcarr.national__final_output"], "model.source_of_sales_change_lcarr.national_agg__all_groupings": ["model.source_of_sales_change_lcarr.national_agg__month_lookback"], "model.source_of_sales_change_lcarr.national_agg__month_lookback": ["model.source_of_sales_change_lcarr.national_agg__same_store_all_store"], "model.source_of_sales_change_lcarr.national_agg__distinct_join": ["model.source_of_sales_change_lcarr.national__big_join"], "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs": ["model.source_of_sales_change_lcarr.national_agg__distinct_join"], "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct": ["model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__distinct_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.national_agg__hash_base_calcs"], "model.source_of_sales_change_lcarr.national_agg__distinct_calcs": ["model.source_of_sales_change_lcarr.national_agg__distinct_join"], "model.source_of_sales_change_lcarr.calc__dim_monthend_date": ["model.source_of_sales_change_lcarr.ast__big_join", "model.source_of_sales_change_lcarr.calc__error", "model.source_of_sales_change_lcarr.market__big_join", "model.source_of_sales_change_lcarr.national__big_join", "model.source_of_sales_change_lcarr.region__big_join", "model.source_of_sales_change_lcarr.stg__dim_same_store"], "model.source_of_sales_change_lcarr.stg__dim_fcr_loc_sales_elig": ["model.source_of_sales_change_lcarr.stg__dim_same_store"], "model.source_of_sales_change_lcarr.stg__dim_same_store": ["model.source_of_sales_change_lcarr.stg__fct_same_store", "model.source_of_sales_change_lcarr.stg__fct_same_store"], "model.source_of_sales_change_lcarr.stg__fct_same_store": ["model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.ast_agg__same_store_all_store", "model.source_of_sales_change_lcarr.calc__dim_price_index_2", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__same_store_all_store", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__same_store_all_store", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__same_store_all_store"], "model.source_of_sales_change_lcarr.tender": ["model.source_of_sales_change_lcarr.trans_detail"], "model.source_of_sales_change_lcarr.item": ["model.source_of_sales_change_lcarr.trans_item", "test.source_of_sales_change_lcarr.not_null_item_trans_id.f3230ec97f", "test.source_of_sales_change_lcarr.unique_item_trans_id.31db52b29b"], "model.source_of_sales_change_lcarr.trans_item": ["model.source_of_sales_change_lcarr.ast_agg__all_groupings", "model.source_of_sales_change_lcarr.ast_agg__all_groupings", "model.source_of_sales_change_lcarr.ast_agg__all_groupings", "model.source_of_sales_change_lcarr.ast_agg__all_groupings", "model.source_of_sales_change_lcarr.ast_agg__all_groupings", "model.source_of_sales_change_lcarr.ast_agg__all_groupings", "model.source_of_sales_change_lcarr.ast_agg__all_groupings", "model.source_of_sales_change_lcarr.ast_agg__all_groupings", "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.market_agg__all_groupings", "model.source_of_sales_change_lcarr.market_agg__all_groupings", "model.source_of_sales_change_lcarr.market_agg__all_groupings", "model.source_of_sales_change_lcarr.market_agg__all_groupings", "model.source_of_sales_change_lcarr.market_agg__all_groupings", "model.source_of_sales_change_lcarr.market_agg__all_groupings", "model.source_of_sales_change_lcarr.market_agg__all_groupings", "model.source_of_sales_change_lcarr.market_agg__all_groupings", "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.national_agg__all_groupings", "model.source_of_sales_change_lcarr.national_agg__all_groupings", "model.source_of_sales_change_lcarr.national_agg__all_groupings", "model.source_of_sales_change_lcarr.national_agg__all_groupings", "model.source_of_sales_change_lcarr.national_agg__all_groupings", "model.source_of_sales_change_lcarr.national_agg__all_groupings", "model.source_of_sales_change_lcarr.national_agg__all_groupings", "model.source_of_sales_change_lcarr.national_agg__all_groupings", "model.source_of_sales_change_lcarr.national_agg__month_lookback_distinct", "model.source_of_sales_change_lcarr.region_agg__all_groupings", "model.source_of_sales_change_lcarr.region_agg__all_groupings", "model.source_of_sales_change_lcarr.region_agg__all_groupings", "model.source_of_sales_change_lcarr.region_agg__all_groupings", "model.source_of_sales_change_lcarr.region_agg__all_groupings", "model.source_of_sales_change_lcarr.region_agg__all_groupings", "model.source_of_sales_change_lcarr.region_agg__all_groupings", "model.source_of_sales_change_lcarr.region_agg__all_groupings", "model.source_of_sales_change_lcarr.region_agg__month_lookback_distinct"], "model.source_of_sales_change_lcarr.trans_detail": ["model.source_of_sales_change_lcarr.trans_item", "test.source_of_sales_change_lcarr.not_null_trans_detail_trans_id.39702ad66f", "test.source_of_sales_change_lcarr.unique_trans_detail_trans_id.bf19cf4015"], "model.source_of_sales_change_lcarr.transaction": ["model.source_of_sales_change_lcarr.trans_detail"], "model.source_of_sales_change_lcarr.stg__dim_location": ["model.source_of_sales_change_lcarr.calc__dim_price_index_1", "model.source_of_sales_change_lcarr.item", "model.source_of_sales_change_lcarr.tender", "model.source_of_sales_change_lcarr.transaction"], "model.source_of_sales_change_lcarr.stg__dim_transaction_status": ["model.source_of_sales_change_lcarr.stg__fct_item", "model.source_of_sales_change_lcarr.stg__fct_tender"], "model.source_of_sales_change_lcarr.stg__dim_destination": ["model.source_of_sales_change_lcarr.transaction"], "model.source_of_sales_change_lcarr.stg__dim_daypart": ["model.source_of_sales_change_lcarr.transaction"], "model.source_of_sales_change_lcarr.stg__fct_item": ["model.source_of_sales_change_lcarr.item"], "model.source_of_sales_change_lcarr.stg__fct_transaction": ["model.source_of_sales_change_lcarr.transaction"], "model.source_of_sales_change_lcarr.stg__dim_item": ["model.source_of_sales_change_lcarr.item"], "model.source_of_sales_change_lcarr.stg__fct_tender": ["model.source_of_sales_change_lcarr.tender"], "model.source_of_sales_change_lcarr.calc__error": [], "model.source_of_sales_change_lcarr.stg__dim_adj_sales": ["model.source_of_sales_change_lcarr.calc__dim_price_index_1", "model.source_of_sales_change_lcarr.calc__error"], "model.source_of_sales_change_lcarr.calc__dim_price_index_3": ["model.source_of_sales_change_lcarr.ast__big_join", "model.source_of_sales_change_lcarr.market__big_join", "model.source_of_sales_change_lcarr.national__big_join", "model.source_of_sales_change_lcarr.region__big_join"], "model.source_of_sales_change_lcarr.calc__dim_price_index_2": ["model.source_of_sales_change_lcarr.calc__dim_price_index_3", "model.source_of_sales_change_lcarr.calc__dim_price_index_3", "model.source_of_sales_change_lcarr.calc__dim_price_index_3"], "model.source_of_sales_change_lcarr.calc__dim_price_index_1": ["model.source_of_sales_change_lcarr.calc__dim_price_index_2"], "test.source_of_sales_change_lcarr.unique_trans_detail_trans_id.bf19cf4015": [], "test.source_of_sales_change_lcarr.not_null_trans_detail_trans_id.39702ad66f": [], "test.source_of_sales_change_lcarr.unique_item_trans_id.31db52b29b": [], "test.source_of_sales_change_lcarr.not_null_item_trans_id.f3230ec97f": [], "model.source_of_sales_change_lcarr.region_agg__distinct_calcs": ["model.source_of_sales_change_lcarr.region_agg__distinct_join"], "model.source_of_sales_change_lcarr.region_agg__hash_base_calcs": ["model.source_of_sales_change_lcarr.region_agg__distinct_join"], "model.source_of_sales_change_lcarr.region_agg__distinct_join": ["model.source_of_sales_change_lcarr.region__big_join"], "model.source_of_sales_change_lcarr.region_agg__same_store_all_store": ["model.source_of_sales_change_lcarr.region__big_join"], "model.source_of_sales_change_lcarr.region__big_join": ["model.source_of_sales_change_lcarr.region__final_output", "model.source_of_sales_change_lcarr.region__final_output"], "model.source_of_sales_change_lcarr.region__final_output": ["model.source_of_sales_change_lcarr.final_output_all"], "model.source_of_sales_change_lcarr.ast__big_join": ["model.source_of_sales_change_lcarr.ast__final_output", "model.source_of_sales_change_lcarr.ast__final_output"], "model.source_of_sales_change_lcarr.ast_agg__all_groupings": ["model.source_of_sales_change_lcarr.ast_agg__month_lookback"], "model.source_of_sales_change_lcarr.ast_agg__same_store_all_store": ["model.source_of_sales_change_lcarr.ast__big_join"], "model.source_of_sales_change_lcarr.ast__final_output": ["model.source_of_sales_change_lcarr.final_output_all"], "model.source_of_sales_change_lcarr.ast_agg__month_lookback": ["model.source_of_sales_change_lcarr.ast_agg__same_store_all_store"], "model.source_of_sales_change_lcarr.ast_agg__month_lookback_distinct": ["model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs"], "model.source_of_sales_change_lcarr.ast_agg__distinct_calcs": ["model.source_of_sales_change_lcarr.ast_agg__distinct_join"], "model.source_of_sales_change_lcarr.ast_agg__hash_base_calcs": ["model.source_of_sales_change_lcarr.ast_agg__distinct_join"], "model.source_of_sales_change_lcarr.ast_agg__distinct_join": ["model.source_of_sales_change_lcarr.ast__big_join"], "model.source_of_sales_change_lcarr.market_agg__month_lookback_distinct": ["model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__distinct_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs", "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs"], "model.source_of_sales_change_lcarr.market__big_join": ["model.source_of_sales_change_lcarr.market__final_output", "model.source_of_sales_change_lcarr.market__final_output"], "model.source_of_sales_change_lcarr.market_agg__distinct_join": ["model.source_of_sales_change_lcarr.market__big_join"], "model.source_of_sales_change_lcarr.market_agg__hash_base_calcs": ["model.source_of_sales_change_lcarr.market_agg__distinct_join"], "model.source_of_sales_change_lcarr.market_agg__month_lookback": ["model.source_of_sales_change_lcarr.market_agg__same_store_all_store"], "model.source_of_sales_change_lcarr.market_agg__all_groupings": ["model.source_of_sales_change_lcarr.market_agg__month_lookback"], "model.source_of_sales_change_lcarr.market_agg__same_store_all_store": ["model.source_of_sales_change_lcarr.market__big_join"], "model.source_of_sales_change_lcarr.market_agg__distinct_calcs": ["model.source_of_sales_change_lcarr.market_agg__distinct_join"], "model.source_of_sales_change_lcarr.market__final_output": ["model.source_of_sales_change_lcarr.final_output_all"], "model.source_of_sales_change_lcarr.national_agg__same_store_all_store": ["model.source_of_sales_change_lcarr.national__big_join"], "model.source_of_sales_change_lcarr.final_output_all": [], "source.source_of_sales_change_lcarr.pos.trans_header": ["model.source_of_sales_change_lcarr.stg__fct_transaction"], "source.source_of_sales_change_lcarr.pos.trans_tender": ["model.source_of_sales_change_lcarr.stg__fct_tender"], "source.source_of_sales_change_lcarr.pos.trans_item": ["model.source_of_sales_change_lcarr.stg__fct_item"], "source.source_of_sales_change_lcarr.pos.transaction_status": ["model.source_of_sales_change_lcarr.stg__dim_transaction_status"], "source.source_of_sales_change_lcarr.public.location_attributes": ["model.source_of_sales_change_lcarr.stg__dim_location"], "source.source_of_sales_change_lcarr.public.dim_date": ["model.source_of_sales_change_lcarr.calc__dim_monthend_date"], "source.source_of_sales_change_lcarr.common.d_destination": ["model.source_of_sales_change_lcarr.stg__dim_destination"], "source.source_of_sales_change_lcarr.apps.dim_item": ["model.source_of_sales_change_lcarr.stg__dim_item"], "source.source_of_sales_change_lcarr.apps.time_d": ["model.source_of_sales_change_lcarr.stg__dim_daypart"], "source.source_of_sales_change_lcarr.fin_lh.fcr_locations_sales_eligibility": ["model.source_of_sales_change_lcarr.stg__dim_fcr_loc_sales_elig"], "source.source_of_sales_change_lcarr.prodmix_dl.fcs_adjusted_sales": ["model.source_of_sales_change_lcarr.stg__dim_adj_sales"]}}